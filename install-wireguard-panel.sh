#!/bin/bash
set -e

# --- Check sudo privileges ---
check_sudo() {
  if [ "$EUID" -eq 0 ]; then
    echo "‚ö†Ô∏è Script ƒëang ch·∫°y v·ªõi quy·ªÅn root. Khuy·∫øn ngh·ªã ch·∫°y v·ªõi sudo thay v√¨ root user."
    SUDO_CMD=""
  elif sudo -n true 2>/dev/null; then
    echo "‚úÖ Sudo privileges ƒë√£ c√≥ s·∫µn"
    SUDO_CMD="sudo"
  else
    echo "‚ùå Script c·∫ßn quy·ªÅn sudo ƒë·ªÉ th·ª±c hi·ªán c√°c tha    rhel)
      echo "üì¶ C√†i ƒë·∫∑t Docker cho RHEL/CentOS..."
      # Remove old versions
      $SUDO_CMD $PKG_MANAGER remove -y docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine 2>/dev/null || true
      
      # Install yum-utils and add Docker repository
      install_packages yum-utils
      $SUDO_CMD yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      install_packages $(get_package_names "docker")
      ;;h·ªëng."
    echo "Vui l√≤ng ch·∫°y: sudo $0"
    exit 1
  fi
}

# --- Detect Linux Distribution ---
detect_distro() {
  if [ -f /etc/os-release ]; then
    . /etc/os-release
    OS=$NAME
    VER=$VERSION_ID
    DISTRO_ID=$ID
    DISTRO_ID_LIKE=$ID_LIKE
  elif type lsb_release >/dev/null 2>&1; then
    OS=$(lsb_release -si)
    VER=$(lsb_release -sr)
    DISTRO_ID=$(echo $OS | tr '[:upper:]' '[:lower:]')
  elif [ -f /etc/redhat-release ]; then
    OS=$(cat /etc/redhat-release | cut -d ' ' -f1)
    VER=$(cat /etc/redhat-release | sed 's/.*release //' | sed 's/ .*//')
    DISTRO_ID="rhel"
  else
    OS=$(uname -s)
    VER=$(uname -r)
    DISTRO_ID="unknown"
  fi
  
  # Normalize distro identification
  case "$DISTRO_ID" in
    ubuntu)
      DISTRO_FAMILY="debian"
      PKG_MANAGER="apt"
      ;;
    debian)
      DISTRO_FAMILY="debian"
      PKG_MANAGER="apt"
      ;;
    centos|rhel|"red hat"*)
      DISTRO_FAMILY="rhel"
      PKG_MANAGER="yum"
      if command -v dnf >/dev/null 2>&1; then
        PKG_MANAGER="dnf"
      fi
      ;;
    fedora)
      DISTRO_FAMILY="fedora"
      PKG_MANAGER="dnf"
      ;;
    arch|manjaro)
      DISTRO_FAMILY="arch"
      PKG_MANAGER="pacman"
      ;;
    opensuse*|sles)
      DISTRO_FAMILY="opensuse"
      PKG_MANAGER="zypper"
      ;;
    *)
      # Check ID_LIKE for derivative distributions
      if [[ "$DISTRO_ID_LIKE" == *"debian"* ]] || [[ "$DISTRO_ID_LIKE" == *"ubuntu"* ]]; then
        DISTRO_FAMILY="debian"
        PKG_MANAGER="apt"
      elif [[ "$DISTRO_ID_LIKE" == *"rhel"* ]] || [[ "$DISTRO_ID_LIKE" == *"fedora"* ]]; then
        DISTRO_FAMILY="rhel"
        PKG_MANAGER="yum"
        if command -v dnf >/dev/null 2>&1; then
          PKG_MANAGER="dnf"
        fi
      elif [[ "$DISTRO_ID_LIKE" == *"arch"* ]]; then
        DISTRO_FAMILY="arch"
        PKG_MANAGER="pacman"
      elif [[ "$DISTRO_ID_LIKE" == *"suse"* ]]; then
        DISTRO_FAMILY="opensuse"
        PKG_MANAGER="zypper"
      else
        DISTRO_FAMILY="unknown"
        PKG_MANAGER="unknown"
      fi
      ;;
  esac
  
  echo "üîç Ph√°t hi·ªán h·ªá ƒëi·ªÅu h√†nh: $OS $VER ($DISTRO_FAMILY)"
  echo "üì¶ Package manager: $PKG_MANAGER"
}

# --- Package management functions ---
update_system() {
  echo "üîÑ C·∫≠p nh·∫≠t h·ªá th·ªëng..."
  case $PKG_MANAGER in
    apt)
      $SUDO_CMD apt update && $SUDO_CMD apt upgrade -y
      ;;
    yum)
      $SUDO_CMD yum update -y
      ;;
    dnf)
      $SUDO_CMD dnf update -y
      ;;
    pacman)
      $SUDO_CMD pacman -Syu --noconfirm
      ;;
    zypper)
      $SUDO_CMD zypper refresh && $SUDO_CMD zypper update -y
      ;;
    *)
      echo "‚ö†Ô∏è Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c package manager. Vui l√≤ng c·∫≠p nh·∫≠t h·ªá th·ªëng th·ªß c√¥ng."
      ;;
  esac
}

install_packages() {
  local packages="$@"
  echo "üì¶ C√†i ƒë·∫∑t packages: $packages"
  
  case $PKG_MANAGER in
    apt)
      $SUDO_CMD apt install -y $packages
      ;;
    yum)
      $SUDO_CMD yum install -y $packages
      ;;
    dnf)
      $SUDO_CMD dnf install -y $packages
      ;;
    pacman)
      $SUDO_CMD pacman -S --noconfirm $packages
      ;;
    zypper)
      $SUDO_CMD zypper install -y $packages
      ;;
    *)
      echo "‚ùå Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c package manager. Vui l√≤ng c√†i ƒë·∫∑t packages sau th·ªß c√¥ng: $packages"
      return 1
      ;;
  esac
}

# --- Get package names for different distros ---
get_package_names() {
  local tool="$1"
  case $tool in
    "base_packages")
      case $DISTRO_FAMILY in
        debian)
          echo "ca-certificates curl jq dnsutils"
          ;;
        rhel|fedora)
          echo "ca-certificates curl jq bind-utils"
          ;;
        arch)
          echo "curl jq bind-tools"
          ;;
        opensuse)
          echo "ca-certificates curl jq bind-utils"
          ;;
        *)
          echo "curl jq"
          ;;
      esac
      ;;
    "docker")
      case $DISTRO_FAMILY in
        debian)
          echo "docker-ce docker-ce-cli containerd.io"
          ;;
        rhel|fedora)
          echo "docker-ce docker-ce-cli containerd.io"
          ;;
        arch)
          echo "docker"
          ;;
        opensuse)
          echo "docker"
          ;;
        *)
          echo "docker"
          ;;
      esac
      ;;
  esac
}

# --- Check required tools ---
check_required_tools() {
  echo "üîç Ki·ªÉm tra c√°c tools c·∫ßn thi·∫øt..."
  
  local missing_tools=""
  
  # Check curl
  if ! command -v curl >/dev/null 2>&1; then
    missing_tools="$missing_tools curl"
    echo "‚ùå curl - ch∆∞a c√≥"
  else
    echo "‚úÖ curl - ƒë√£ c√≥ s·∫µn"
  fi
  
  # Check jq
  if ! command -v jq >/dev/null 2>&1; then
    missing_tools="$missing_tools jq"
    echo "‚ùå jq - ch∆∞a c√≥"
  else
    echo "‚úÖ jq - ƒë√£ c√≥ s·∫µn"
  fi
  
  # Check ca-certificates (skip if already installed)
  if [ "$DISTRO_FAMILY" = "debian" ]; then
    if ! dpkg -l | grep -q "ca-certificates"; then
      missing_tools="$missing_tools ca-certificates"
      echo "‚ùå ca-certificates - ch∆∞a c√≥"
    else
      echo "‚úÖ ca-certificates - ƒë√£ c√≥ s·∫µn"
    fi
  elif [ "$DISTRO_FAMILY" = "rhel" ] || [ "$DISTRO_FAMILY" = "fedora" ] || [ "$DISTRO_FAMILY" = "opensuse" ]; then
    # Tr√™n RHEL/Fedora/openSUSE, ca-certificates th∆∞·ªùng ƒë√£ c√≥ s·∫µn
    if ! rpm -q ca-certificates >/dev/null 2>&1; then
      missing_tools="$missing_tools ca-certificates"
      echo "‚ùå ca-certificates - ch∆∞a c√≥"
    else
      echo "‚úÖ ca-certificates - ƒë√£ c√≥ s·∫µn"
    fi
  fi
  
  # Check DNS utilities
  if command -v getent >/dev/null 2>&1; then
    echo "‚úÖ getent (DNS resolution) - ƒë√£ c√≥ s·∫µn"
  elif command -v nslookup >/dev/null 2>&1; then
    echo "‚úÖ nslookup (DNS resolution) - ƒë√£ c√≥ s·∫µn"
  elif command -v dig >/dev/null 2>&1; then
    echo "‚úÖ dig (DNS resolution) - ƒë√£ c√≥ s·∫µn"
  else
    # C·∫ßn c√†i DNS utilities
    case $DISTRO_FAMILY in
      debian)
        missing_tools="$missing_tools dnsutils"
        echo "‚ùå DNS utilities (dnsutils) - ch∆∞a c√≥"
        ;;
      rhel|fedora|opensuse)
        missing_tools="$missing_tools bind-utils"
        echo "‚ùå DNS utilities (bind-utils) - ch∆∞a c√≥"
        ;;
      arch)
        missing_tools="$missing_tools bind-tools"
        echo "‚ùå DNS utilities (bind-tools) - ch∆∞a c√≥"
        ;;
    esac
  fi
  
  # Check openssl (for password generation)
  if ! command -v openssl >/dev/null 2>&1; then
    missing_tools="$missing_tools openssl"
    echo "‚ùå openssl - ch∆∞a c√≥"
  else
    echo "‚úÖ openssl - ƒë√£ c√≥ s·∫µn"
  fi
  
  if [ ! -z "$missing_tools" ]; then
    echo "üì¶ C√†i ƒë·∫∑t c√°c tools c√≤n thi·∫øu:$missing_tools"
    install_packages $missing_tools
  else
    echo "üéâ T·∫•t c·∫£ tools c·∫ßn thi·∫øt ƒë√£ c√≥ s·∫µn!"
  fi
}

echo "==============================="
echo " üöÄ WireGuard + WG-Easy (+ NPM) Installer"
echo "==============================="
echo ""
echo "üñ•Ô∏è H·ªó tr·ª£ c√°c b·∫£n ph√¢n ph·ªëi Linux:"
echo "   ‚Ä¢ Ubuntu/Debian (apt)"
echo "   ‚Ä¢ CentOS/RHEL/Fedora (yum/dnf)"  
echo "   ‚Ä¢ Arch Linux (pacman)"
echo "   ‚Ä¢ openSUSE (zypper)"
echo ""

# --- Check sudo privileges first ---
check_sudo

# --- Detect distribution first ---
detect_distro

if [ "$DISTRO_FAMILY" = "unknown" ]; then
  echo "‚ùå Kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c b·∫£n ph√¢n ph·ªëi Linux n√†y."
  echo "Script ch·ªâ h·ªó tr·ª£: Ubuntu/Debian, CentOS/RHEL/Fedora, Arch Linux, openSUSE"
  exit 1
fi

echo ""
echo "üí° Script n√†y c√≥ th·ªÉ ch·∫°y l·∫°i an to√†n:"
echo "   ‚Ä¢ T·ª± ƒë·ªông bypass Docker n·∫øu ƒë√£ c√†i"
echo "   ‚Ä¢ Backup c·∫•u h√¨nh c≈© tr∆∞·ªõc khi t·∫°o m·ªõi"
echo "   ‚Ä¢ D·ª´ng containers c≈© tr∆∞·ªõc khi kh·ªüi ƒë·ªông"
echo ""
echo "‚ö†Ô∏è Script c·∫ßn quy·ªÅn sudo ƒë·ªÉ:"
echo "   ‚Ä¢ C√†i ƒë·∫∑t packages v√† c·∫≠p nh·∫≠t h·ªá th·ªëng"
echo "   ‚Ä¢ C·∫•u h√¨nh network forwarding"
echo "   ‚Ä¢ Qu·∫£n l√Ω Docker service"
echo "   ‚Ä¢ C·∫•u h√¨nh firewall"
echo ""

# --- Menu l·ª±a ch·ªçn ---
echo "Ch·ªçn ch·∫ø ƒë·ªô c√†i ƒë·∫∑t:"
echo "  1) Ch·ªâ WG-Easy"
echo "  2) WG-Easy + Nginx Proxy Manager (m·∫∑c ƒë·ªãnh)"
read -p "Nh·∫≠p l·ª±a ch·ªçn [1-2] (Enter = 2): " MODE_INPUT
if [ "$MODE_INPUT" == "1" ]; then
  MODE=1
else
  MODE=2
fi

# --- Nh·∫≠p config chung ---
read -p "Nh·∫≠p domain cho VPN (vd: vpn.example.com): " WG_HOST

# --- Ki·ªÉm tra domain tr·ªè v·ªÅ IP VPS ---
SERVER_IP=$(curl -s https://api.ipify.org)
while true; do
  # Use different DNS resolution methods based on available tools
  if command -v getent >/dev/null 2>&1; then
    DOMAIN_IP=$(getent ahosts "$WG_HOST" | awk '/STREAM/ {print $1; exit}')
  elif command -v nslookup >/dev/null 2>&1; then
    DOMAIN_IP=$(nslookup "$WG_HOST" | awk '/^Address: / { print $2; exit }')
  elif command -v dig >/dev/null 2>&1; then
    DOMAIN_IP=$(dig +short "$WG_HOST" | tail -n1)
  else
    echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y c√¥ng c·ª• DNS resolution. B·ªè qua ki·ªÉm tra domain."
    break
  fi
  
  if [ "$DOMAIN_IP" = "$SERVER_IP" ]; then
    echo "‚úÖ Domain $WG_HOST ƒë√£ tr·ªè v·ªÅ ƒë√∫ng IP VPS: $SERVER_IP"
    break
  else
    echo "‚ö†Ô∏è Domain $WG_HOST hi·ªán ƒëang tr·ªè v·ªÅ $DOMAIN_IP (kh√¥ng kh·ªõp IP VPS $SERVER_IP)"
    echo "üëâ H√£y c·∫≠p nh·∫≠t DNS record cho $WG_HOST ‚Üí $SERVER_IP r·ªìi nh·∫•n Enter ƒë·ªÉ ki·ªÉm tra l·∫°i."
    read
  fi
done

# WG-Easy password
read -sp "Nh·∫≠p m·∫≠t kh·∫©u cho WG-Easy (Enter ƒë·ªÉ random): " WG_PASSWORD
echo ""
if [ -z "$WG_PASSWORD" ]; then
  WG_PASSWORD=$(openssl rand -base64 12)
  AUTO_WG_PASS=true
fi

# N·∫øu c√≥ NPM th√¨ c·∫ßn email + password
if [ "$MODE" == "2" ]; then
  read -p "Nh·∫≠p email admin cho NPM (Let's Encrypt + login): " ADMIN_EMAIL
  if [ -z "$ADMIN_EMAIL" ]; then
    ADMIN_EMAIL="admin@${WG_HOST}"
  fi

  read -sp "Nh·∫≠p m·∫≠t kh·∫©u cho NPM Admin (Enter ƒë·ªÉ random): " ADMIN_PASS
  echo ""
  if [ -z "$ADMIN_PASS" ]; then
    ADMIN_PASS=$(openssl rand -base64 12)
    AUTO_NPM_PASS=true
  fi
fi

# --- Update system ---
update_system

# --- Install base packages smartly ---
echo "üîç Ki·ªÉm tra v√† c√†i ƒë·∫∑t base packages..."

# Check individual packages and install only if needed
case $DISTRO_FAMILY in
  debian)
    # Check ca-certificates
    if ! dpkg -l | grep -q "ca-certificates"; then
      echo "üì¶ C√†i ƒë·∫∑t ca-certificates..."
      $SUDO_CMD apt install -y ca-certificates
    else
      echo "‚úÖ ca-certificates ƒë√£ c√≥ s·∫µn"
    fi
    ;;
  rhel|fedora|opensuse)
    # Check ca-certificates on RPM systems
    if ! rpm -q ca-certificates >/dev/null 2>&1; then
      echo "üì¶ C√†i ƒë·∫∑t ca-certificates..."
      install_packages ca-certificates
    else
      echo "‚úÖ ca-certificates ƒë√£ c√≥ s·∫µn"
    fi
    ;;
esac

check_required_tools

# --- Enable IPv4/IPv6 forwarding ---
$SUDO_CMD tee /etc/sysctl.d/99-wireguard.conf > /dev/null <<EOF
net.ipv4.ip_forward=1
net.ipv6.conf.all.forwarding=1
EOF
$SUDO_CMD sysctl --system

# --- Install Docker ---
install_docker() {
  case $DISTRO_FAMILY in
    debian)
      echo "üì¶ C√†i ƒë·∫∑t Docker cho $DISTRO_FAMILY..."
      # Remove old versions
      $SUDO_CMD apt remove -y docker docker-engine docker.io containerd runc 2>/dev/null || true
      
      # Add Docker GPG key and repository
      curl -fsSL https://download.docker.com/linux/$DISTRO_ID/gpg | $SUDO_CMD gpg --dearmor -o /usr/share/keyrings/docker.gpg
      echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] \
https://download.docker.com/linux/$DISTRO_ID $(lsb_release -cs) stable" \
| $SUDO_CMD tee /etc/apt/sources.list.d/docker.list
      $SUDO_CMD apt update
      install_packages $(get_package_names "docker")
      ;;
      
    rhel)
      echo "ÔøΩ C√†i ƒë·∫∑t Docker cho RHEL/CentOS..."
      # Remove old versions
      $PKG_MANAGER remove -y docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine 2>/dev/null || true
      
      # Install yum-utils and add Docker repository
      install_packages yum-utils
      yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
      install_packages $(get_package_names "docker")
      ;;
      
    fedora)
      echo "üì¶ C√†i ƒë·∫∑t Docker cho Fedora..."
      # Remove old versions
      $SUDO_CMD dnf remove -y docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-selinux docker-engine-selinux docker-engine 2>/dev/null || true
      
      # Install dnf-plugins-core and add Docker repository
      install_packages dnf-plugins-core
      $SUDO_CMD dnf config-manager --add-repo https://download.docker.com/linux/fedora/docker-ce.repo
      install_packages $(get_package_names "docker")
      ;;
      
    arch)
      echo "üì¶ C√†i ƒë·∫∑t Docker cho Arch Linux..."
      install_packages docker docker-compose
      ;;
      
    opensuse)
      echo "üì¶ C√†i ƒë·∫∑t Docker cho openSUSE..."
      $SUDO_CMD zypper addrepo https://download.docker.com/linux/sles/docker-ce.repo
      $SUDO_CMD zypper refresh
      install_packages docker-ce docker-ce-cli containerd.io
      ;;
      
    *)
      echo "‚ùå Kh√¥ng h·ªó tr·ª£ c√†i ƒë·∫∑t Docker t·ª± ƒë·ªông cho distro n√†y"
      echo "Vui l√≤ng c√†i ƒë·∫∑t Docker th·ªß c√¥ng t·ª´: https://docs.docker.com/engine/install/"
      exit 1
      ;;
  esac
}

if command -v docker >/dev/null 2>&1 && docker --version >/dev/null 2>&1; then
  echo "‚úÖ Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t: $(docker --version)"
  
  # Ki·ªÉm tra Docker ƒëang ch·∫°y
  if ! $SUDO_CMD systemctl is-active --quiet docker; then
    echo "üîÑ Kh·ªüi ƒë·ªông Docker service..."
    $SUDO_CMD systemctl enable docker
    $SUDO_CMD systemctl start docker
  else
    echo "‚úÖ Docker service ƒëang ch·∫°y"
  fi
else
  install_docker
  $SUDO_CMD systemctl enable docker
  $SUDO_CMD systemctl start docker
  echo "‚úÖ Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng"
fi

# --- Install Docker Compose ---
install_docker_compose() {
  case $DISTRO_FAMILY in
    arch)
      # Arch Linux ƒë√£ c√≥ docker-compose trong package docker
      echo "‚úÖ Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i c√πng Docker tr√™n Arch Linux"
      ;;
    *)
      # C√†i ƒë·∫∑t Docker Compose t·ª´ GitHub releases cho c√°c distro kh√°c
      echo "üì¶ C√†i ƒë·∫∑t Docker Compose..."
      $SUDO_CMD curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
        -o /usr/local/bin/docker-compose
      $SUDO_CMD chmod +x /usr/local/bin/docker-compose
      
      # T·∫°o symlink cho m·ªôt s·ªë distro
      if [ ! -f /usr/bin/docker-compose ]; then
        $SUDO_CMD ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose
      fi
      ;;
  esac
}

if command -v docker-compose >/dev/null 2>&1 && docker-compose --version >/dev/null 2>&1; then
  echo "‚úÖ Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t: $(docker-compose --version)"
else
  install_docker_compose
  echo "‚úÖ Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng"
fi

# --- Create stack ---
if [ -d ~/vpn-stack ]; then
  echo "‚ö†Ô∏è Th∆∞ m·ª•c ~/vpn-stack ƒë√£ t·ªìn t·∫°i. Backup c·∫•u h√¨nh c≈©..."
  mv ~/vpn-stack ~/vpn-stack.backup.$(date +%Y%m%d-%H%M%S)
fi

mkdir -p ~/vpn-stack
cd ~/vpn-stack

cat > docker-compose.yml <<EOF
volumes:
  etc_wireguard:

services:
  wg-easy:
    image: ghcr.io/wg-easy/wg-easy:15
    container_name: wg-easy
    environment:
      - INIT_ENABLED=true
      - INIT_HOST=${WG_HOST}      # domain ho·∫∑c IP public
      - INIT_USERNAME=admin          # t√™n user web UI
      - INIT_PASSWORD=${WG_PASSWORD}         # m·∫≠t kh·∫©u web UI
      - INIT_PORT=51820          # port UDP WireGuard
      #- WG_DEFAULT_ADDRESS=10.8.0.x,fd42:42:42::x
      - INIT_DNS=1.1.1.1,2606:4700:4700::1111
    volumes:
      - etc_wireguard:/etc/wireguard
      - /lib/modules:/lib/modules:ro
    ports:
      - "51820:51820/udp"            # VPN UDP port
      # KH√îNG expose port 51821 tr·ª±c ti·∫øp ra ngo√†i, ƒë·ªÉ NPM reverse proxy
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    networks:
      wg:
        ipv4_address: 10.42.42.42
        ipv6_address: fdcc:ad94:bacf:61a3::2a
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv6.conf.all.forwarding=1
      - net.ipv6.conf.default.forwarding=1
EOF

# N·∫øu ch·ªçn c√†i c·∫£ NPM, th√™m v√†o ph·∫ßn services
if [[ "$MODE" == "2" ]]; then
cat >> docker-compose.yml <<EOF

  npm:
    image: jc21/nginx-proxy-manager:latest
    container_name: npm
    restart: unless-stopped
    ports:
      - "80:80"
      - "127.0.0.1:81:81"
      - "443:443"
    volumes:
      - ./npm-data:/data
      - ./npm-letsencrypt:/etc/letsencrypt
    networks:
      - wg
EOF
fi

# Cu·ªëi c√πng m·ªõi th√™m ph·∫ßn networks
cat >> docker-compose.yml <<EOF

networks:
  wg:
    driver: bridge
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: 10.42.42.0/24
        - subnet: fdcc:ad94:bacf:61a3::/64
EOF

# --- Start stack ---
echo "üöÄ Kh·ªüi ƒë·ªông stack..."

# Ki·ªÉm tra xem c√≥ containers ƒëang ch·∫°y kh√¥ng
if docker ps -q --filter "name=wg-easy" | grep -q . || docker ps -q --filter "name=npm" | grep -q .; then
  echo "‚ö†Ô∏è Ph√°t hi·ªán containers ƒëang ch·∫°y. ƒêang d·ª´ng v√† x√≥a..."
  docker-compose down -v 2>/dev/null || true
  
  # X√≥a containers c≈© n·∫øu c√≤n s√≥t l·∫°i
  docker rm -f wg-easy npm 2>/dev/null || true
fi

docker-compose up -d
echo "‚úÖ Stack ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông"

# --- Firewall config (UFW/firewalld/iptables) ---
configure_firewall() {
  echo "üîí ƒêang c·∫•u h√¨nh firewall..."
  
  # Detect firewall type
  if command -v ufw >/dev/null 2>&1; then
    FIREWALL_TYPE="ufw"
  elif command -v firewall-cmd >/dev/null 2>&1; then
    FIREWALL_TYPE="firewalld"
  elif command -v iptables >/dev/null 2>&1; then
    FIREWALL_TYPE="iptables"
  else
    FIREWALL_TYPE="none"
  fi
  
  echo "üîç Ph√°t hi·ªán firewall: $FIREWALL_TYPE"
  
  case $FIREWALL_TYPE in
    ufw)
      UFW_STATUS=$($SUDO_CMD ufw status | head -n1 | awk '{print $2}')
      if [ "$UFW_STATUS" = "inactive" ]; then
        echo "‚ö†Ô∏è UFW ƒëang inactive (t·∫•t c·∫£ port ƒë·ªÅu m·ªü). B·ªè qua b∆∞·ªõc m·ªü firewall."
      else
        echo "üîí ƒêang ki·ªÉm tra UFW firewall..."
        
        # M·ªü port 51820/udp cho WireGuard
        if ! $SUDO_CMD ufw status | grep -q "51820/udp"; then
          echo "‚ö° M·ªü port 51820/udp cho WireGuard"
          $SUDO_CMD ufw allow 51820/udp
        else
          echo "‚úÖ Port 51820/udp ƒë√£ m·ªü"
        fi
        
        # M·ªü port 80/tcp cho HTTP (Let's Encrypt)
        if ! $SUDO_CMD ufw status | grep -q "80/tcp"; then
          echo "‚ö° M·ªü port 80/tcp (HTTP)"
          $SUDO_CMD ufw allow 80/tcp
        else
          echo "‚úÖ Port 80/tcp ƒë√£ m·ªü"
        fi
        
        # M·ªü port 443/tcp cho HTTPS
        if ! $SUDO_CMD ufw status | grep -q "443/tcp"; then
          echo "‚ö° M·ªü port 443/tcp (HTTPS)"
          $SUDO_CMD ufw allow 443/tcp
        else
          echo "‚úÖ Port 443/tcp ƒë√£ m·ªü"
        fi
      fi
      ;;
      
    firewalld)
      if $SUDO_CMD systemctl is-active --quiet firewalld; then
        echo "üîí C·∫•u h√¨nh firewalld..."
        
        # M·ªü port 51820/udp cho WireGuard
        if ! $SUDO_CMD firewall-cmd --list-ports | grep -q "51820/udp"; then
          echo "‚ö° M·ªü port 51820/udp cho WireGuard"
          $SUDO_CMD firewall-cmd --permanent --add-port=51820/udp
        else
          echo "‚úÖ Port 51820/udp ƒë√£ m·ªü"
        fi
        
        # M·ªü port 80/tcp cho HTTP
        if ! $SUDO_CMD firewall-cmd --list-services | grep -q "http"; then
          echo "‚ö° M·ªü HTTP service"
          $SUDO_CMD firewall-cmd --permanent --add-service=http
        else
          echo "‚úÖ HTTP service ƒë√£ m·ªü"
        fi
        
        # M·ªü port 443/tcp cho HTTPS
        if ! $SUDO_CMD firewall-cmd --list-services | grep -q "https"; then
          echo "‚ö° M·ªü HTTPS service"
          $SUDO_CMD firewall-cmd --permanent --add-service=https
        else
          echo "‚úÖ HTTPS service ƒë√£ m·ªü"
        fi
        
        # Reload firewall rules
        $SUDO_CMD firewall-cmd --reload
        echo "‚úÖ Firewalld rules ƒë√£ ƒë∆∞·ª£c reload"
      else
        echo "‚ö†Ô∏è firewalld kh√¥ng ƒëang ch·∫°y. B·ªè qua c·∫•u h√¨nh firewall."
      fi
      ;;
      
    iptables)
      echo "üîí C·∫•u h√¨nh iptables..."
      
      # Check if iptables rules already exist
      if ! $SUDO_CMD iptables -C INPUT -p udp --dport 51820 -j ACCEPT 2>/dev/null; then
        echo "‚ö° M·ªü port 51820/udp cho WireGuard"
        $SUDO_CMD iptables -I INPUT -p udp --dport 51820 -j ACCEPT
      else
        echo "‚úÖ Port 51820/udp ƒë√£ m·ªü"
      fi
      
      if ! $SUDO_CMD iptables -C INPUT -p tcp --dport 80 -j ACCEPT 2>/dev/null; then
        echo "‚ö° M·ªü port 80/tcp (HTTP)"
        $SUDO_CMD iptables -I INPUT -p tcp --dport 80 -j ACCEPT
      else
        echo "‚úÖ Port 80/tcp ƒë√£ m·ªü"
      fi
      
      if ! $SUDO_CMD iptables -C INPUT -p tcp --dport 443 -j ACCEPT 2>/dev/null; then
        echo "‚ö° M·ªü port 443/tcp (HTTPS)"
        $SUDO_CMD iptables -I INPUT -p tcp --dport 443 -j ACCEPT
      else
        echo "‚úÖ Port 443/tcp ƒë√£ m·ªü"
      fi
      
      # Save iptables rules (different methods for different distros)
      case $DISTRO_FAMILY in
        debian)
          if command -v iptables-save >/dev/null 2>&1; then
            $SUDO_CMD iptables-save > /etc/iptables/rules.v4 2>/dev/null || \
            $SUDO_CMD iptables-save > /etc/iptables.rules 2>/dev/null || \
            echo "‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u iptables rules t·ª± ƒë·ªông"
          fi
          ;;
        rhel|fedora)
          if command -v iptables-save >/dev/null 2>&1; then
            $SUDO_CMD iptables-save > /etc/sysconfig/iptables 2>/dev/null || \
            echo "‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u iptables rules t·ª± ƒë·ªông"
          fi
          ;;
        *)
          echo "‚ö†Ô∏è L∆∞u iptables rules th·ªß c√¥ng: iptables-save > /path/to/rules"
          ;;
      esac
      ;;
      
    none)
      echo "‚ö†Ô∏è Kh√¥ng ph√°t hi·ªán firewall. ƒê·∫£m b·∫£o ports 51820/udp, 80/tcp, 443/tcp ƒë√£ m·ªü."
      ;;
  esac
}

configure_firewall

# --- N·∫øu c√≥ NPM th√¨ c·∫•u h√¨nh t·ª± ƒë·ªông ---
if [ "$MODE" -eq 2 ]; then
  echo "‚è≥ ƒê·ª£i NPM kh·ªüi ƒë·ªông v√† s·∫µn s√†ng..."
  
  # Wait for NPM to be fully ready with retry mechanism
  MAX_ATTEMPTS=20
  ATTEMPT=0
  TOKEN=""
  
  while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
    ATTEMPT=$((ATTEMPT + 1))
    echo "üîÑ Th·ª≠ k·∫øt n·ªëi NPM API (l·∫ßn $ATTEMPT/$MAX_ATTEMPTS)..."
    
    # Check if NPM API is responding (400 = server ready but bad request, which is expected)
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" --connect-timeout 5 --max-time 10 http://127.0.0.1:81/api/tokens 2>/dev/null || echo "000")
    if [ "$HTTP_CODE" = "400" ] || [ "$HTTP_CODE" = "200" ]; then
      echo "‚úÖ NPM API ƒë√£ s·∫µn s√†ng! (HTTP: $HTTP_CODE)"
      
      # Try to get token
      RESPONSE=$(curl -s -X POST http://127.0.0.1:81/api/tokens \
        -H 'Content-Type: application/json' \
        -d '{"identity":"admin@example.com","secret":"changeme"}' \
        --connect-timeout 10 --max-time 15 2>/dev/null || echo '{"error":"curl_failed"}')
      
      TOKEN=$(echo "$RESPONSE" | jq -r .token 2>/dev/null || echo "null")
      
      if [ "$TOKEN" != "null" ] && [ ! -z "$TOKEN" ] && [ "$TOKEN" != "" ]; then
        echo "üîë ƒê√£ l·∫•y ƒë∆∞·ª£c token th√†nh c√¥ng!"
        break
      else
        echo "‚ö†Ô∏è API ph·∫£n h·ªìi nh∆∞ng kh√¥ng l·∫•y ƒë∆∞·ª£c token. Response: $RESPONSE"
      fi
    else
      echo "‚è≥ NPM API ch∆∞a s·∫µn s√†ng (HTTP: $HTTP_CODE), ƒë·ª£i 15 gi√¢y..."
    fi
    
    if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
      sleep 15
    fi
  done

  if [ "$TOKEN" != "null" ] && [ ! -z "$TOKEN" ] && [ "$TOKEN" != "" ]; then
    echo "üîë Token h·ª£p l·ªá: ${TOKEN:0:20}..."
    
    # Update admin user info (kh√¥ng bao g·ªìm password)
    echo "üë§ C·∫≠p nh·∫≠t th√¥ng tin admin..."
    UPDATE_RESPONSE=$(curl -s -X PUT http://127.0.0.1:81/api/users/1 \
      -H "Authorization: Bearer $TOKEN" \
      -H 'Content-Type: application/json' \
      -d '{"email":"'"$ADMIN_EMAIL"'","name":"Administrator","nickname":"Admin","roles":["admin"],"is_disabled":false}' \
      --connect-timeout 10 --max-time 15 2>/dev/null || echo '{"error":"curl_failed"}')

    echo "üìù Update user info response: $UPDATE_RESPONSE"
    
    # ƒê·ªïi password ri√™ng bi·ªát
    echo "üîê ƒê·ªïi m·∫≠t kh·∫©u admin..."
    PASSWORD_RESPONSE=$(curl -s -X PUT http://127.0.0.1:81/api/users/1/auth \
      -H "Authorization: Bearer $TOKEN" \
      -H 'Content-Type: application/json' \
      -d '{"type":"password","current":"changeme","secret":"'"$ADMIN_PASS"'"}' \
      --connect-timeout 10 --max-time 15 2>/dev/null || echo 'false')
    
    echo "üîç Password change response: $PASSWORD_RESPONSE"
    
    if [ "$PASSWORD_RESPONSE" = "true" ]; then
      echo "‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!"
    else
      echo "‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·ªïi m·∫≠t kh·∫©u. Response: $PASSWORD_RESPONSE"
      echo "üîß C√≥ th·ªÉ m·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ph·∫£i 'changeme' ho·∫∑c API c√≥ thay ƒë·ªïi"
      echo "üìã NPM Admin s·∫Ω s·ª≠ d·ª•ng credentials m·∫∑c ƒë·ªãnh: admin@example.com / changeme"
    fi

    # T·∫°o proxy host cho WG-Easy v·ªõi SSL certificate t·ª± ƒë·ªông v√† force SSL
    echo "üîó T·∫°o proxy host cho WG-Easy (bao g·ªìm SSL certificate + force HTTPS)..."
    PROXY_RESPONSE=$(curl -s -X POST http://127.0.0.1:81/api/nginx/proxy-hosts \
      -H "Authorization: Bearer $TOKEN" \
      -H 'Content-Type: application/json' \
      -d '{
        "domain_names":["'"$WG_HOST"'"],
        "forward_scheme":"http",
        "forward_host":"wg-easy",
        "forward_port":51821,
        "access_list_id":"0",
        "certificate_id":"new",
        "ssl_forced":true,
        "caching_enabled":true,
        "allow_websocket_upgrade":true,
        "block_exploits":false,
        "http2_support":true,
        "hsts_enabled":true,
        "hsts_subdomains":false,
        "meta":{
          "letsencrypt_email":"'"$ADMIN_EMAIL"'",
          "letsencrypt_agree":true,
          "dns_challenge":false
        },
        "advanced_config":"",
        "locations":[]
      }' \
      --connect-timeout 15 --max-time 60 2>/dev/null || echo '{"error":"curl_failed"}')
    
    echo "üåê Proxy host response: $PROXY_RESPONSE"
    
    PROXY_ID=$(echo "$PROXY_RESPONSE" | jq -r .id 2>/dev/null || echo "null")
    if [ "$PROXY_ID" != "null" ] && [ ! -z "$PROXY_ID" ]; then
      echo "‚úÖ ƒê√£ t·∫°o proxy host, SSL certificate v√† force HTTPS th√†nh c√¥ng (ID: $PROXY_ID)"
      echo "üéâ WG-Easy ƒë√£ s·∫µn s√†ng truy c·∫≠p qua HTTPS!"
    else
      echo "‚ö†Ô∏è C√≥ th·ªÉ c√≥ l·ªói khi t·∫°o proxy host, ki·ªÉm tra logs NPM"
      echo "üìù Response: $PROXY_RESPONSE"
    fi
  else
    echo "‚ùå Kh√¥ng th·ªÉ l·∫•y token t·ª´ NPM API sau $MAX_ATTEMPTS l·∫ßn th·ª≠."
    echo "üîß H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c th·ªß c√¥ng:"
    echo "   1. Ki·ªÉm tra containers: docker ps"
    echo "   2. Xem logs NPM: docker logs npm"
    echo "   3. Truy c·∫≠p http://localhost:81 ƒë·ªÉ setup th·ªß c√¥ng"
    echo "   4. Default login: admin@example.com / changeme"
    echo "   5. T·∫°o proxy host tr·ªè $WG_HOST ‚Üí wg-easy:51821"
  fi
fi

# --- Summary ---
echo "========================================"
echo "üéâ C√†i ƒë·∫∑t ho√†n t·∫•t!"
echo ""
echo "üìã TH√îNG TIN TRUY C·∫¨P:"
echo "WG-Easy VPN Panel: https://${WG_HOST}"
echo "WG-Easy Username: admin"
if [ "$AUTO_WG_PASS" = true ]; then
  echo "WG-Easy Password: $WG_PASSWORD"
else
  echo "WG-Easy Password: (b·∫°n ƒë√£ nh·∫≠p)"
fi
echo "VPN UDP Port: 51820"
echo ""
if [ "$MODE" -eq 2 ]; then
  echo "NPM Dashboard: http://$(curl -s https://api.ipify.org):81"
  if [ "$PASSWORD_RESPONSE" = "true" ]; then
    echo "NPM Email: $ADMIN_EMAIL"
    if [ "$AUTO_NPM_PASS" = true ]; then
      echo "NPM Password: $ADMIN_PASS"
    else
      echo "NPM Password: (b·∫°n ƒë√£ nh·∫≠p)"
    fi
  else
    echo "NPM Email: admin@example.com"
    echo "NPM Password: changeme (m·∫∑c ƒë·ªãnh - c·∫ßn ƒë·ªïi th·ªß c√¥ng)"
  fi
  echo ""
fi
echo "üîß H∆Ø·ªöNG D·∫™N:"
echo "1. Truy c·∫≠p WG-Easy panel ƒë·ªÉ t·∫°o VPN clients"
echo "2. T·∫£i file config ho·∫∑c qu√©t QR code ƒë·ªÉ k·∫øt n·ªëi VPN"
if [ "$MODE" -eq 2 ]; then
  echo "3. S·ª≠ d·ª•ng NPM dashboard ƒë·ªÉ qu·∫£n l√Ω reverse proxy"
  echo "4. SSL certificate s·∫Ω t·ª± ƒë·ªông gia h·∫°n"
fi
echo "========================================"
