#!/bin/bash
set -e

echo "==============================="
echo " üöÄ WireGuard + WG-Easy (+ NPM) Installer"
echo "==============================="
echo ""
echo "üí° Script n√†y c√≥ th·ªÉ ch·∫°y l·∫°i an to√†n:"
echo "   ‚Ä¢ T·ª± ƒë·ªông bypass Docker n·∫øu ƒë√£ c√†i"
echo "   ‚Ä¢ Backup c·∫•u h√¨nh c≈© tr∆∞·ªõc khi t·∫°o m·ªõi"
echo "   ‚Ä¢ D·ª´ng containers c≈© tr∆∞·ªõc khi kh·ªüi ƒë·ªông"
echo ""

# --- Menu l·ª±a ch·ªçn ---
echo "Ch·ªçn ch·∫ø ƒë·ªô c√†i ƒë·∫∑t:"
echo "  1) Ch·ªâ WG-Easy"
echo "  2) WG-Easy + Nginx Proxy Manager (m·∫∑c ƒë·ªãnh)"
read -p "Nh·∫≠p l·ª±a ch·ªçn [1-2] (Enter = 2): " MODE_INPUT
if [ "$MODE_INPUT" == "1" ]; then
  MODE=1
else
  MODE=2
fi

# --- Nh·∫≠p config chung ---
read -p "Nh·∫≠p domain cho VPN (vd: vpn.example.com): " WG_HOST

# --- Ki·ªÉm tra domain tr·ªè v·ªÅ IP VPS ---
SERVER_IP=$(curl -s https://api.ipify.org)
while true; do
  DOMAIN_IP=$(getent ahosts "$WG_HOST" | awk '/STREAM/ {print $1; exit}')
  if [ "$DOMAIN_IP" = "$SERVER_IP" ]; then
    echo "‚úÖ Domain $WG_HOST ƒë√£ tr·ªè v·ªÅ ƒë√∫ng IP VPS: $SERVER_IP"
    break
  else
    echo "‚ö†Ô∏è Domain $WG_HOST hi·ªán ƒëang tr·ªè v·ªÅ $DOMAIN_IP (kh√¥ng kh·ªõp IP VPS $SERVER_IP)"
    echo "üëâ H√£y c·∫≠p nh·∫≠t DNS record cho $WG_HOST ‚Üí $SERVER_IP r·ªìi nh·∫•n Enter ƒë·ªÉ ki·ªÉm tra l·∫°i."
    read
  fi
done

# WG-Easy password
read -sp "Nh·∫≠p m·∫≠t kh·∫©u cho WG-Easy (Enter ƒë·ªÉ random): " WG_PASSWORD
echo ""
if [ -z "$WG_PASSWORD" ]; then
  WG_PASSWORD=$(openssl rand -base64 12)
  AUTO_WG_PASS=true
fi

# N·∫øu c√≥ NPM th√¨ c·∫ßn email + password
if [ "$MODE" == "2" ]; then
  read -p "Nh·∫≠p email admin cho NPM (Let's Encrypt + login): " ADMIN_EMAIL
  if [ -z "$ADMIN_EMAIL" ]; then
    ADMIN_EMAIL="admin@${WG_HOST}"
  fi

  read -sp "Nh·∫≠p m·∫≠t kh·∫©u cho NPM Admin (Enter ƒë·ªÉ random): " ADMIN_PASS
  echo ""
  if [ -z "$ADMIN_PASS" ]; then
    ADMIN_PASS=$(openssl rand -base64 12)
    AUTO_NPM_PASS=true
  fi
fi

# --- Update system ---
apt update && apt upgrade -y
apt install -y apt-transport-https ca-certificates curl jq software-properties-common

# --- Enable IPv4/IPv6 forwarding ---
cat <<EOF >/etc/sysctl.d/99-wireguard.conf
net.ipv4.ip_forward=1
net.ipv6.conf.all.forwarding=1
EOF
sysctl --system

# --- Install Docker ---
if command -v docker >/dev/null 2>&1 && docker --version >/dev/null 2>&1; then
  echo "‚úÖ Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t: $(docker --version)"
  
  # Ki·ªÉm tra Docker ƒëang ch·∫°y
  if ! systemctl is-active --quiet docker; then
    echo "üîÑ Kh·ªüi ƒë·ªông Docker service..."
    systemctl enable docker
    systemctl start docker
  else
    echo "‚úÖ Docker service ƒëang ch·∫°y"
  fi
else
  echo "üì¶ C√†i ƒë·∫∑t Docker..."
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker.gpg
  echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker.gpg] \
https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" \
| tee /etc/apt/sources.list.d/docker.list
  apt update
  apt install -y docker-ce docker-ce-cli containerd.io

  systemctl enable docker
  systemctl start docker
  echo "‚úÖ Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng"
fi

# --- Install Docker Compose ---
if command -v docker-compose >/dev/null 2>&1 && docker-compose --version >/dev/null 2>&1; then
  echo "‚úÖ Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t: $(docker-compose --version)"
else
  echo "üì¶ C√†i ƒë·∫∑t Docker Compose..."
  curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
    -o /usr/local/bin/docker-compose
  chmod +x /usr/local/bin/docker-compose
  echo "‚úÖ Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng"
fi

# --- Create stack ---
if [ -d ~/vpn-stack ]; then
  echo "‚ö†Ô∏è Th∆∞ m·ª•c ~/vpn-stack ƒë√£ t·ªìn t·∫°i. Backup c·∫•u h√¨nh c≈©..."
  mv ~/vpn-stack ~/vpn-stack.backup.$(date +%Y%m%d-%H%M%S)
fi

mkdir -p ~/vpn-stack
cd ~/vpn-stack

cat > docker-compose.yml <<EOF
volumes:
  etc_wireguard:

services:
  wg-easy:
    image: ghcr.io/wg-easy/wg-easy:15
    container_name: wg-easy
    environment:
      - INIT_ENABLED=true
      - INIT_HOST=${WG_HOST}      # domain ho·∫∑c IP public
      - INIT_USERNAME=admin          # t√™n user web UI
      - INIT_PASSWORD=${WG_PASSWORD}         # m·∫≠t kh·∫©u web UI
      - INIT_PORT=51820          # port UDP WireGuard
      #- WG_DEFAULT_ADDRESS=10.8.0.x,fd42:42:42::x
      - INIT_DNS=1.1.1.1,2606:4700:4700::1111
    volumes:
      - etc_wireguard:/etc/wireguard
      - /lib/modules:/lib/modules:ro
    ports:
      - "51820:51820/udp"            # VPN UDP port
      # KH√îNG expose port 51821 tr·ª±c ti·∫øp ra ngo√†i, ƒë·ªÉ NPM reverse proxy
    restart: unless-stopped
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    networks:
      wg:
        ipv4_address: 10.42.42.42
        ipv6_address: fdcc:ad94:bacf:61a3::2a
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv6.conf.all.forwarding=1
      - net.ipv6.conf.default.forwarding=1
EOF

# N·∫øu ch·ªçn c√†i c·∫£ NPM, th√™m v√†o ph·∫ßn services
if [[ "$MODE" == "2" ]]; then
cat >> docker-compose.yml <<EOF

  npm:
    image: jc21/nginx-proxy-manager:latest
    container_name: npm
    restart: unless-stopped
    ports:
      - "80:80"
      - "127.0.0.1:81:81"
      - "443:443"
    volumes:
      - ./npm-data:/data
      - ./npm-letsencrypt:/etc/letsencrypt
    networks:
      - wg
EOF
fi

# Cu·ªëi c√πng m·ªõi th√™m ph·∫ßn networks
cat >> docker-compose.yml <<EOF

networks:
  wg:
    driver: bridge
    enable_ipv6: true
    ipam:
      driver: default
      config:
        - subnet: 10.42.42.0/24
        - subnet: fdcc:ad94:bacf:61a3::/64
EOF

# --- Start stack ---
echo "üöÄ Kh·ªüi ƒë·ªông stack..."

# Ki·ªÉm tra xem c√≥ containers ƒëang ch·∫°y kh√¥ng
if docker ps -q --filter "name=wg-easy" | grep -q . || docker ps -q --filter "name=npm" | grep -q .; then
  echo "‚ö†Ô∏è Ph√°t hi·ªán containers ƒëang ch·∫°y. ƒêang d·ª´ng v√† x√≥a..."
  docker-compose down -v 2>/dev/null || true
  
  # X√≥a containers c≈© n·∫øu c√≤n s√≥t l·∫°i
  docker rm -f wg-easy npm 2>/dev/null || true
fi

docker-compose up -d
echo "‚úÖ Stack ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông"

# --- Firewall config (UFW) ---
if command -v ufw >/dev/null 2>&1; then
  UFW_STATUS=$(ufw status | head -n1 | awk '{print $2}')
  if [ "$UFW_STATUS" = "inactive" ]; then
    echo "‚ö†Ô∏è  UFW ƒëang inactive (t·∫•t c·∫£ port ƒë·ªÅu m·ªü). B·ªè qua b∆∞·ªõc m·ªü firewall."
  else
    echo "üîí ƒêang ki·ªÉm tra UFW firewall..."

    # M·ªü port 51820/udp cho WireGuard
    if ! ufw status | grep -q "51820/udp"; then
      echo "‚ö° M·ªü port 51820/udp cho WireGuard"
      ufw allow 51820/udp
    else
      echo "‚úÖ Port 51820/udp ƒë√£ m·ªü"
    fi

    # M·ªü port 80/tcp cho HTTP (Let's Encrypt)
    if ! ufw status | grep -q "80/tcp"; then
      echo "‚ö° M·ªü port 80/tcp (HTTP)"
      ufw allow 80/tcp
    else
      echo "‚úÖ Port 80/tcp ƒë√£ m·ªü"
    fi

    # M·ªü port 443/tcp cho HTTPS
    if ! ufw status | grep -q "443/tcp"; then
      echo "‚ö° M·ªü port 443/tcp (HTTPS)"
      ufw allow 443/tcp
    else
      echo "‚úÖ Port 443/tcp ƒë√£ m·ªü"
    fi
  fi
else
  echo "‚ö†Ô∏è  UFW ch∆∞a ƒë∆∞·ª£c c√†i. B·ªè qua b∆∞·ªõc m·ªü firewall."
fi


# --- N·∫øu c√≥ NPM th√¨ c·∫•u h√¨nh t·ª± ƒë·ªông ---
if [ "$MODE" -eq 2 ]; then
  echo "‚è≥ ƒê·ª£i NPM kh·ªüi ƒë·ªông v√† s·∫µn s√†ng..."
  
  # Wait for NPM to be fully ready with retry mechanism
  MAX_ATTEMPTS=20
  ATTEMPT=0
  TOKEN=""
  
  while [ $ATTEMPT -lt $MAX_ATTEMPTS ]; do
    ATTEMPT=$((ATTEMPT + 1))
    echo "üîÑ Th·ª≠ k·∫øt n·ªëi NPM API (l·∫ßn $ATTEMPT/$MAX_ATTEMPTS)..."
    
    # Check if NPM API is responding
    if curl -s -f http://127.0.0.1:81/api/tokens > /dev/null 2>&1; then
      echo "‚úÖ NPM API ƒë√£ s·∫µn s√†ng!"
      
      # Try to get token
      RESPONSE=$(curl -s -X POST http://127.0.0.1:81/api/tokens \
        -H 'Content-Type: application/json' \
        -d '{"identity":"admin@example.com","secret":"changeme"}' \
        2>/dev/null)
      
      TOKEN=$(echo "$RESPONSE" | jq -r .token 2>/dev/null)
      
      if [ "$TOKEN" != "null" ] && [ ! -z "$TOKEN" ] && [ "$TOKEN" != "" ]; then
        echo "üîë ƒê√£ l·∫•y ƒë∆∞·ª£c token th√†nh c√¥ng!"
        break
      else
        echo "‚ö†Ô∏è API ph·∫£n h·ªìi nh∆∞ng kh√¥ng l·∫•y ƒë∆∞·ª£c token. Response: $RESPONSE"
      fi
    else
      echo "‚è≥ NPM API ch∆∞a s·∫µn s√†ng, ƒë·ª£i 15 gi√¢y..."
    fi
    
    if [ $ATTEMPT -lt $MAX_ATTEMPTS ]; then
      sleep 15
    fi
  done

  if [ "$TOKEN" != "null" ] && [ ! -z "$TOKEN" ] && [ "$TOKEN" != "" ]; then
    # Update admin user
    echo "üë§ C·∫≠p nh·∫≠t th√¥ng tin admin..."
    UPDATE_RESPONSE=$(curl -s -X PUT http://127.0.0.1:81/api/users/1 \
      -H "Authorization: Bearer $TOKEN" \
      -H 'Content-Type: application/json' \
      -d '{"email":"'"$ADMIN_EMAIL"'","name":"Administrator","nickname":"Admin","roles":["admin"],"is_disabled":false,"auth":[{"type":"password","secret":"'"$ADMIN_PASS"'"}]}')

    echo "üìù Update response: $UPDATE_RESPONSE"

    # Login v·ªõi pass m·ªõi
    echo "üîê ƒêƒÉng nh·∫≠p v·ªõi m·∫≠t kh·∫©u m·ªõi..."
    NEW_TOKEN_RESPONSE=$(curl -s -X POST http://127.0.0.1:81/api/tokens \
      -H 'Content-Type: application/json' \
      -d '{"identity":"'"$ADMIN_EMAIL"'","secret":"'"$ADMIN_PASS"'"}')
    
    NEW_TOKEN=$(echo "$NEW_TOKEN_RESPONSE" | jq -r .token 2>/dev/null)
    
    if [ "$NEW_TOKEN" != "null" ] && [ ! -z "$NEW_TOKEN" ]; then
      TOKEN="$NEW_TOKEN"
      echo "‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng v·ªõi t√†i kho·∫£n m·ªõi!"
    else
      echo "‚ö†Ô∏è Kh√¥ng th·ªÉ ƒëƒÉng nh·∫≠p v·ªõi t√†i kho·∫£n m·ªõi, s·ª≠ d·ª•ng token c≈©. Response: $NEW_TOKEN_RESPONSE"
    fi

    # T·∫°o proxy host cho WG-Easy
    echo "üîó T·∫°o proxy host cho WG-Easy..."
    PROXY_RESPONSE=$(curl -s -X POST http://127.0.0.1:81/api/nginx/proxy-hosts \
      -H "Authorization: Bearer $TOKEN" \
      -H 'Content-Type: application/json' \
      -d '{
        "domain_names":["'"$WG_HOST"'"],
        "forward_scheme":"http",
        "forward_host":"wg-easy",
        "forward_port":51821,
        "access_list_id":0,
        "certificate_id":0,
        "ssl_forced":true,
        "caching_enabled":false,
        "block_exploits":true,
        "http2_support":true,
        "hsts_enabled":false,
        "hsts_subdomains":false,
        "meta": {
          "letsencrypt_email":"'"$ADMIN_EMAIL"'",
          "letsencrypt_agree":true
        }
      }')
    
    echo "üåê Proxy host response: $PROXY_RESPONSE"
    
    PROXY_ID=$(echo "$PROXY_RESPONSE" | jq -r .id 2>/dev/null)
    if [ "$PROXY_ID" != "null" ] && [ ! -z "$PROXY_ID" ]; then
      echo "‚úÖ ƒê√£ t·∫°o proxy host th√†nh c√¥ng (ID: $PROXY_ID)"
    else
      echo "‚ö†Ô∏è C√≥ th·ªÉ c√≥ l·ªói khi t·∫°o proxy host, ki·ªÉm tra logs NPM"
    fi
  else
    echo "‚ùå Kh√¥ng th·ªÉ l·∫•y token t·ª´ NPM API sau $MAX_ATTEMPTS l·∫ßn th·ª≠."
    echo "üîß H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c th·ªß c√¥ng:"
    echo "   1. Ki·ªÉm tra containers: docker ps"
    echo "   2. Xem logs NPM: docker logs npm"
    echo "   3. Truy c·∫≠p http://localhost:81 ƒë·ªÉ setup th·ªß c√¥ng"
    echo "   4. Default login: admin@example.com / changeme"
    echo "   5. T·∫°o proxy host tr·ªè $WG_HOST ‚Üí wg-easy:51821"
  fi
fi

# --- Summary ---
echo "========================================"
echo "üéâ C√†i ƒë·∫∑t ho√†n t·∫•t!"
echo "WG-Easy panel: https://${WG_HOST}"
echo "VPN UDP port: 51820"
if [ "$AUTO_WG_PASS" = true ]; then
  echo "WG-Easy Password (auto): $WG_PASSWORD"
else
  echo "WG-Easy Password (b·∫°n nh·∫≠p)"
fi
if [ "$MODE" -eq 2 ]; then
  echo "NPM Admin: $ADMIN_EMAIL"
  if [ "$AUTO_NPM_PASS" = true ]; then
    echo "NPM Password (auto): $ADMIN_PASS"
  else
    echo "NPM Password (b·∫°n nh·∫≠p)"
  fi
fi
echo "========================================"