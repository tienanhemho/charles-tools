#!/bin/bash
# T·ª± ƒë·ªông t·∫°o nhi·ªÅu proxy IPv4 (client k·∫øt n·ªëi) -> IPv6 (outbound traffic) v·ªõi random password
# Author: ChatGPT

### === C·∫•u h√¨nh ng∆∞·ªùi d√πng ===
PROXY_COUNT=1000                   # S·ªë l∆∞·ª£ng proxy mu·ªën t·∫°o
PREFIX="auto"                     # Prefix IPv6 kh√¥ng bao g·ªìm ƒë·∫±ng sau d·∫•u :: (ƒë·ªÉ "auto" ƒë·ªÉ t·ª± detect)
START_HEX=92                      # Hex b·∫Øt ƒë·∫ßu (v√≠ d·ª• t·ª´ ::5c = 92) - ch·ªâ d√πng khi USE_RANDOM_IPV6=false
USE_RANDOM_IPV6=true             # Set true ƒë·ªÉ t·∫°o IPv6 random (4 nh√≥m sau ::), false ƒë·ªÉ tƒÉng d·∫ßn t·ª´ START_HEX
GATEWAY="auto"                    # Gateway IPv6 c·ªßa server (ƒë·ªÉ "auto" ƒë·ªÉ t·ª± detect)
NETPLAN_FILE="/etc/netplan/50-cloud-init.yaml"
PORT_START=60000                   # Port ƒë·∫ßu ti√™n
PROXY_USER="user"            # Username chung
WORKDIR="$HOME/3proxy-docker"
RESULT_FILE="$WORKDIR/proxy_result.txt"
IPV6_LIST_FILE="$WORKDIR/ipv6_list.txt"
USE_EXISTING_CREDENTIALS=true     # Set true ƒë·ªÉ s·ª≠ d·ª•ng username/password c≈© t·ª´ proxy_result.txt

# Telegram configuration (optional)
TELEGRAM_BOT_TOKEN=""             # Bot token t·ª´ @BotFather (ƒë·ªÉ tr·ªëng ƒë·ªÉ t·∫Øt)
TELEGRAM_CHAT_ID=""               # Chat ID ƒë·ªÉ g·ª≠i file (ƒë·ªÉ tr·ªëng ƒë·ªÉ t·∫Øt)

set -euo pipefail  # Exit on error, undefined vars, pipe failures

### === Validation v√† Cleanup Functions ===
load_existing_credentials() {
    echo "üîë T·∫£i th√¥ng tin x√°c th·ª±c c≈© t·ª´ file..."
    
    declare -A -g OLD_CREDENTIALS
    
    if [[ ! -f "$RESULT_FILE" ]]; then
        echo "‚ö†Ô∏è File $RESULT_FILE kh√¥ng t·ªìn t·∫°i, s·∫Ω t·∫°o m·ªõi credentials"
        return 1
    fi
    
    local line_count=0
    while IFS= read -r line || [[ -n "$line" ]]; do
        # Format: user:pass@ip:port
        if [[ $line =~ ^([^:]+):([^@]+)@([^:]+):([0-9]+)$ ]]; then
            local user="${BASH_REMATCH[1]}"
            local pass="${BASH_REMATCH[2]}"
            local port="${BASH_REMATCH[4]}"
            
            OLD_CREDENTIALS["$port"]="$user:$pass"
            ((line_count++))
        fi
    done < "$RESULT_FILE"
    
    if [[ $line_count -eq 0 ]]; then
        echo "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y credentials h·ª£p l·ªá trong file c≈©"
        return 1
    fi
    
    echo "‚úÖ ƒê√£ t·∫£i $line_count credentials t·ª´ file c≈©"
    return 0
}

cleanup_docker() {
    echo "üßπ D·ªçn d·∫πp Docker containers v√† images c≈©..."
    
    # Stop v√† remove container c≈©
    if docker ps -q -f name=ipv4-to-ipv6-proxy | grep -q .; then
        echo "  üì¶ Stopping existing container..."
        docker stop ipv4-to-ipv6-proxy || true
    fi
    
    if docker ps -aq -f name=ipv4-to-ipv6-proxy | grep -q .; then
        echo "  üóëÔ∏è Removing existing container..."
        docker rm ipv4-to-ipv6-proxy || true
    fi
    
    # Remove image c≈© n·∫øu c√≥
    if docker images -q 3proxy-docker-proxy 2>/dev/null | grep -q .; then
        echo "  üñºÔ∏è Removing old image..."
        docker rmi 3proxy-docker-proxy || true
    fi
}

check_dependencies() {
    echo "üîç Ki·ªÉm tra dependencies..."
    
    local missing_deps=()
    
    if ! command -v docker &> /dev/null; then
        missing_deps+=("docker")
    fi
    
    if ! command -v openssl &> /dev/null; then
        missing_deps+=("openssl")
    fi
    
    if ! command -v curl &> /dev/null; then
        missing_deps+=("curl")
    fi
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        echo "‚ùå Thi·∫øu dependencies: ${missing_deps[*]}"
        
        # Auto-install missing dependencies
        echo "ÔøΩ ƒêang t·ª± ƒë·ªông c√†i ƒë·∫∑t dependencies..."
        
        # Update package list
        echo "üì• Updating package list..."
        sudo apt update
        
        # Install each missing dependency
        for dep in "${missing_deps[@]}"; do
            case "$dep" in
                "docker")
                    echo "üê≥ C√†i ƒë·∫∑t Docker..."
                    # Install Docker using the official method
                    sudo apt install -y apt-transport-https ca-certificates curl gnupg lsb-release
                    
                    # Detect distribution for correct repository
                    if [[ -f /etc/os-release ]]; then
                        . /etc/os-release
                        DISTRO_ID=${ID}
                    else
                        echo "‚ö†Ô∏è Kh√¥ng th·ªÉ detect distro, s·ª≠ d·ª•ng ubuntu l√†m fallback"
                        DISTRO_ID="ubuntu"
                    fi
                    
                    # Set correct repository URL based on distro
                    case "$DISTRO_ID" in
                        ubuntu)
                            DOCKER_REPO_URL="https://download.docker.com/linux/ubuntu"
                            ;;
                        debian)
                            DOCKER_REPO_URL="https://download.docker.com/linux/debian"
                            ;;
                        *)
                            echo "‚ö†Ô∏è Distro $DISTRO_ID c√≥ th·ªÉ kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£ ch√≠nh th·ª©c, s·ª≠ d·ª•ng ubuntu repo"
                            DOCKER_REPO_URL="https://download.docker.com/linux/ubuntu"
                            ;;
                    esac
                    
                    echo "üìç S·ª≠ d·ª•ng Docker repository cho: $DISTRO_ID"
                    
                    # Add Docker's official GPG key (if not exists)
                    if [[ ! -f /usr/share/keyrings/docker-archive-keyring.gpg ]]; then
                        curl -fsSL "${DOCKER_REPO_URL}/gpg" | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
                    fi
                    
                    # Add Docker repository (if not exists)
                    if ! grep -q "download.docker.com" /etc/apt/sources.list.d/docker.list 2>/dev/null; then
                        echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] ${DOCKER_REPO_URL} $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
                    fi
                    
                    # Update and install Docker
                    sudo apt update
                    if sudo apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin; then
                        echo "  ‚úÖ Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
                        
                        # Start and enable Docker
                        sudo systemctl start docker
                        sudo systemctl enable docker
                        
                        # Add current user to docker group
                        sudo usermod -aG docker $USER
                        echo "  ‚úÖ ƒê√£ th√™m user v√†o group docker"
                        echo "  ‚ö†Ô∏è B·∫°n c√≥ th·ªÉ c·∫ßn logout/login l·∫°i ƒë·ªÉ quy·ªÅn docker c√≥ hi·ªáu l·ª±c"
                    else
                        echo "  ‚ùå C√†i ƒë·∫∑t Docker th·∫•t b·∫°i, th·ª≠ fallback method..."
                        # Fallback to docker.io
                        if sudo apt install -y docker.io docker-compose; then
                            echo "  ‚úÖ Docker (docker.io) ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
                            sudo systemctl start docker
                            sudo systemctl enable docker
                            sudo usermod -aG docker $USER
                        else
                            echo "  ‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t Docker"
                            exit 1
                        fi
                    fi
                    ;;
                "openssl")
                    echo "üîê C√†i ƒë·∫∑t OpenSSL..."
                    sudo apt install -y openssl
                    ;;
                "curl")
                    echo "üåê C√†i ƒë·∫∑t cURL..."
                    sudo apt install -y curl
                    ;;
            esac
        done
        
        echo "‚úÖ ƒê√£ c√†i ƒë·∫∑t t·∫•t c·∫£ dependencies"
    fi
    
    # Ki·ªÉm tra Docker daemon
    if ! docker info &>/dev/null; then
        echo "üîÑ Kh·ªüi ƒë·ªông Docker daemon..."
        sudo systemctl start docker
        
        # Wait a bit for Docker to start
        sleep 3
        
        if ! docker info &>/dev/null; then
            echo "‚ùå Docker daemon kh√¥ng ch·∫°y ho·∫∑c user kh√¥ng c√≥ quy·ªÅn"
            echo "üìã Th·ª≠ ch·∫°y l·∫°i script sau khi logout/login ƒë·ªÉ quy·ªÅn docker c√≥ hi·ªáu l·ª±c"
            echo "üìã Ho·∫∑c ch·∫°y: newgrp docker"
            exit 1
        fi
    fi
    
    echo "‚úÖ Dependencies OK"
}

validate_config() {
    echo "üîß Ki·ªÉm tra c·∫•u h√¨nh..."
    
    # C√†i ƒë·∫∑t v√† migrate to Netplan n·∫øu c·∫ßn
    echo "üîç Ki·ªÉm tra Netplan..."
    if ! command -v netplan &>/dev/null || [[ ! -d "/etc/netplan" ]]; then
        echo "  üì¶ Netplan ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        if ! install_netplan; then
            echo "‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t Netplan"
            exit 1
        fi
    fi
    
    # Ki·ªÉm tra v√† migrate t·ª´ ifupdown n·∫øu c·∫ßn
    if [[ -f "/etc/network/interfaces" ]] && grep -q -E "^(auto|iface)" "/etc/network/interfaces" 2>/dev/null; then
        # Ki·ªÉm tra xem c√≥ config netplan ch∆∞a
        local has_netplan_config=false
        if [[ -d "/etc/netplan" ]]; then
            local netplan_files=($(find /etc/netplan -name "*.yaml" -o -name "*.yml" 2>/dev/null))
            for file in "${netplan_files[@]}"; do
                if [[ -f "$file" ]] && grep -q "ethernets:" "$file" 2>/dev/null; then
                    has_netplan_config=true
                    NETPLAN_FILE="$file"
                    break
                fi
            done
        fi
        
        if [[ "$has_netplan_config" == "false" ]]; then
            echo "  üîÑ Ph√°t hi·ªán c·∫•u h√¨nh ifupdown, ƒëang migrate sang Netplan..."
            if ! migrate_ifupdown_to_netplan; then
                echo "‚ùå Migration th·∫•t b·∫°i"
                exit 1
            fi
        else
            echo "  ‚úÖ Netplan config ƒë√£ t·ªìn t·∫°i: $NETPLAN_FILE"
        fi
    else
        echo "  ‚úÖ S·∫µn s√†ng s·ª≠ d·ª•ng Netplan"
    fi
    
    # Ch·∫°y auto detection n·∫øu c·∫ßn
    if [[ "$PREFIX" == "auto" || "$GATEWAY" == "auto" ]]; then
        if ! auto_detect_ipv6_config; then
            exit 1
        fi
    fi
    
    if [[ -z "$PREFIX" || "$PREFIX" == "auto" ]]; then
        echo "‚ùå PREFIX kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ho·∫∑c auto-detect th·∫•t b·∫°i"
        echo "üí° ƒê·∫∑t PREFIX th·ªß c√¥ng, v√≠ d·ª•: PREFIX=\"2001:db8\""
        exit 1
    fi
    
    if [[ -z "$GATEWAY" || "$GATEWAY" == "auto" ]]; then
        echo "‚ùå GATEWAY kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng ho·∫∑c auto-detect th·∫•t b·∫°i"
        echo "üí° ƒê·∫∑t GATEWAY th·ªß c√¥ng, v√≠ d·ª•: GATEWAY=\"fe80::1\""
        exit 1
    fi
    
    if [[ $PROXY_COUNT -lt 1 || $PROXY_COUNT -gt 1000 ]]; then
        echo "‚ùå PROXY_COUNT ph·∫£i t·ª´ 1-1000"
        exit 1
    fi
    
    echo "‚úÖ Config OK"
    echo "  üìù PREFIX: $PREFIX"
    echo "  üö™ GATEWAY: $GATEWAY"
}

upload_to_telegram() {
    echo "üì± Ki·ªÉm tra c·∫•u h√¨nh Telegram..."
    
    # Ki·ªÉm tra xem c√≥ c·∫•u h√¨nh Telegram kh√¥ng
    if [[ -z "$TELEGRAM_BOT_TOKEN" || -z "$TELEGRAM_CHAT_ID" ]]; then
        echo "‚ÑπÔ∏è Telegram kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh, b·ªè qua upload"
        return 0
    fi
    
    if [[ ! -f "$RESULT_FILE" ]]; then
        echo "‚ùå File proxy result kh√¥ng t·ªìn t·∫°i: $RESULT_FILE"
        return 1
    fi
    
    if [[ ! -f "$IPV6_LIST_FILE" ]]; then
        echo "‚ùå File IPv6 list kh√¥ng t·ªìn t·∫°i: $IPV6_LIST_FILE"
        return 1
    fi
    
    echo "üì§ ƒêang upload files t·ªõi Telegram..."
    
    # T·∫°o caption v·ªõi th√¥ng tin
    local caption="üéØ Proxy Setup Complete!
üìä Proxies: $PROXY_COUNT
üåê Port range: ${PORT_START}-$((PORT_START + PROXY_COUNT - 1))
üïê Time: $(date '+%Y-%m-%d %H:%M:%S')
üñ•Ô∏è Server: $(hostname)
üìã IPv6 Mode: $(if [[ "$USE_RANDOM_IPV6" == "true" ]]; then echo "Random"; else echo "Sequential"; fi)"
    
    # Upload file proxy result
    echo "  üìÑ Uploading proxy result file..."
    local response1=$(curl -s -X POST \
        "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" \
        -F "chat_id=${TELEGRAM_CHAT_ID}" \
        -F "document=@${RESULT_FILE}" \
        -F "caption=${caption}")
    
    local success_count=0
    if echo "$response1" | grep -q '"ok":true'; then
        echo "  ‚úÖ Proxy result file uploaded successfully"
        ((success_count++))
    else
        echo "  ‚ùå Proxy result file upload failed:"
        echo "$response1" | grep -o '"description":"[^"]*"' || echo "Unknown error"
    fi
    
    # Upload file IPv6 list
    echo "  üìÑ Uploading IPv6 list file..."
    local ipv6_caption="üåç IPv6 Addresses List
üìä Count: ${#IP_LIST[@]} addresses
üéØ Prefix: $PREFIX
üïê Generated: $(date '+%Y-%m-%d %H:%M:%S')
üñ•Ô∏è Server: $(hostname)"
    
    local response2=$(curl -s -X POST \
        "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendDocument" \
        -F "chat_id=${TELEGRAM_CHAT_ID}" \
        -F "document=@${IPV6_LIST_FILE}" \
        -F "caption=${ipv6_caption}")
    
    if echo "$response2" | grep -q '"ok":true'; then
        echo "  ‚úÖ IPv6 list file uploaded successfully"
        ((success_count++))
    else
        echo "  ‚ùå IPv6 list file upload failed:"
        echo "$response2" | grep -o '"description":"[^"]*"' || echo "Unknown error"
    fi
    
    # T·ªïng k·∫øt
    if [[ $success_count -eq 2 ]]; then
        echo "‚úÖ T·∫•t c·∫£ files ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng t·ªõi Telegram (2/2)"
        return 0
    elif [[ $success_count -eq 1 ]]; then
        echo "‚ö†Ô∏è Ch·ªâ upload ƒë∆∞·ª£c 1/2 files t·ªõi Telegram"
        return 1
    else
        echo "‚ùå Kh√¥ng th·ªÉ upload files n√†o t·ªõi Telegram"
        return 1
    fi
}

generate_random_ipv6_suffix() {
    # T·∫°o 4 nh√≥m hex random (m·ªói nh√≥m 4 k√Ω t·ª± hex ƒë·∫ßy ƒë·ªß)
    # Format: xxxx:xxxx:xxxx:xxxx (kh√¥ng d√πng :: v√¨ PREFIX ƒë√£ c√≥ ::)
    local group1=$(printf "%04x" $((RANDOM % 65536)))  # 0000-ffff
    local group2=$(printf "%04x" $((RANDOM % 65536)))  # 0000-ffff  
    local group3=$(printf "%04x" $((RANDOM % 65536)))  # 0000-ffff
    local group4=$(printf "%04x" $((RANDOM % 65536)))  # 0000-ffff
    
    echo "${group1}:${group2}:${group3}:${group4}"
}

auto_detect_ipv6_config() {
    echo "üîç Auto-detecting IPv6 configuration..."
    
    # Detect IPv6 prefix t·ª´ interface ƒë·∫ßu ti√™n c√≥ IPv6
    local detected_prefix=""
    local detected_gateway=""
    
    # L·∫•y IPv6 addresses t·ª´ interface (lo·∫°i b·ªè loopback v√† link-local)
    local ipv6_addrs=$(ip -6 addr show | grep 'inet6' | grep -v 'scope link' | grep -v '::1' | head -10)
    
    if [[ -n "$ipv6_addrs" ]]; then
        # T√¨m ƒë·ªãa ch·ªâ IPv6 global ƒë·∫ßu ti√™n
        local global_ipv6=$(echo "$ipv6_addrs" | grep 'scope global' | head -1 | awk '{print $2}' | cut -d'/' -f1)
        
        if [[ -n "$global_ipv6" ]]; then
            # L·∫•y prefix t·ª´ ƒë·ªãa ch·ªâ IPv6 (l·∫•y ph·∫ßn tr∆∞·ªõc :: cu·ªëi c√πng)
            if [[ "$global_ipv6" =~ ^([0-9a-f:]+)::[0-9a-f:]*$ ]]; then
                detected_prefix="${BASH_REMATCH[1]}"
                echo "  üì° Detected IPv6 global address: $global_ipv6"
                echo "  üéØ Extracted prefix: $detected_prefix"
            else
                # Fallback: l·∫•y 4 nh√≥m ƒë·∫ßu c·ªßa IPv6
                detected_prefix=$(echo "$global_ipv6" | cut -d':' -f1-4)
                echo "  üì° Detected IPv6 address: $global_ipv6"
                echo "  üéØ Extracted prefix (first 4 groups): $detected_prefix"
            fi
        fi
    fi
    
    # Detect gateway IPv6
    local gateway_output=$(ip -6 route show default 2>/dev/null | head -1)
    if [[ -n "$gateway_output" ]]; then
        detected_gateway=$(echo "$gateway_output" | awk '{print $3}')
        echo "  üö™ Detected IPv6 gateway: $detected_gateway"
    fi
    
    # Fallback methods n·∫øu kh√¥ng detect ƒë∆∞·ª£c
    if [[ -z "$detected_prefix" ]]; then
        echo "  ‚ö†Ô∏è Kh√¥ng th·ªÉ auto-detect IPv6 prefix t·ª´ interface"
        echo "  üîç Th·ª≠ ph∆∞∆°ng ph√°p kh√°c..."
        
        # Th·ª≠ ƒë·ªçc t·ª´ interfaces file tr∆∞·ªõc
        if [[ -f "/etc/network/interfaces" ]]; then
            local interfaces_ipv6=$(grep -E "up[[:space:]]+ip[[:space:]]+addr[[:space:]]+add[[:space:]]+.*::" "/etc/network/interfaces" | head -1 | awk '{print $5}')
            if [[ -n "$interfaces_ipv6" ]]; then
                # L·∫•y prefix t·ª´ ƒë·ªãa ch·ªâ IPv6 trong interfaces file
                if [[ "$interfaces_ipv6" =~ ^([0-9a-f:]+)::[0-9a-f:]*/.*$ ]]; then
                    detected_prefix="${BASH_REMATCH[1]}"
                    echo "  üìÑ Found prefix in interfaces: $detected_prefix"
                else
                    # Fallback: l·∫•y 4 nh√≥m ƒë·∫ßu
                    detected_prefix=$(echo "$interfaces_ipv6" | cut -d':' -f1-4)
                    echo "  üìÑ Extracted prefix from interfaces: $detected_prefix"
                fi
            fi
        fi
        
        # Th·ª≠ t·ª´ /proc/net/if_inet6 n·∫øu v·∫´n ch∆∞a c√≥
        if [[ -z "$detected_prefix" ]]; then
            local proc_ipv6=$(cat /proc/net/if_inet6 2>/dev/null | grep -v '^00000000000000000000000000000001' | head -1)
            if [[ -n "$proc_ipv6" ]]; then
                # Parse IPv6 t·ª´ /proc format
                local hex_addr=$(echo "$proc_ipv6" | awk '{print $1}')
                # Chuy·ªÉn ƒë·ªïi hex th√†nh IPv6 format v√† l·∫•y prefix
                local formatted_ipv6=$(echo "$hex_addr" | sed 's/\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)\(..\)/\1\2:\3\4:\5\6:\7\8:\9a:\11\12:\13\14:\15\16/')
                detected_prefix=$(echo "$formatted_ipv6" | cut -d':' -f1-4)
                echo "  üìù Fallback prefix from /proc: $detected_prefix"
            fi
        fi
    fi
    
    if [[ -z "$detected_gateway" ]]; then
        echo "  ‚ö†Ô∏è Kh√¥ng th·ªÉ auto-detect IPv6 gateway"
        echo "  üí° Th·ª≠ t√¨m t·ª´ Netplan ho·∫∑c interfaces file..."
        
        # Th·ª≠ t√¨m gateway t·ª´ netplan
        if [[ -f "$NETPLAN_FILE" ]]; then
            local netplan_gw=$(grep -A 10 "gateway6\|routes:" "$NETPLAN_FILE" 2>/dev/null | grep -E "gateway6|via:" | awk '{print $2}' | head -1)
            if [[ -n "$netplan_gw" ]]; then
                detected_gateway="$netplan_gw"
                echo "  üìÑ Found gateway in Netplan: $detected_gateway"
            fi
        fi
        
        # Th·ª≠ t√¨m t·ª´ interfaces file n·∫øu v·∫´n ch∆∞a c√≥
        if [[ -z "$detected_gateway" && -f "/etc/network/interfaces" ]]; then
            local interfaces_gw=$(grep -E "^[[:space:]]*gateway[[:space:]]+" "/etc/network/interfaces" | awk '{print $2}' | head -1)
            if [[ -n "$interfaces_gw" ]]; then
                detected_gateway="$interfaces_gw"
                echo "  üìÑ Found gateway in interfaces: $detected_gateway"
            fi
        fi
    fi
    
    # C·∫≠p nh·∫≠t bi·∫øn global n·∫øu detect th√†nh c√¥ng
    if [[ "$PREFIX" == "auto" ]]; then
        if [[ -n "$detected_prefix" ]]; then
            PREFIX="$detected_prefix"
            echo "  ‚úÖ Auto-set PREFIX = $PREFIX"
        else
            echo "  ‚ùå Kh√¥ng th·ªÉ auto-detect PREFIX, vui l√≤ng ƒë·∫∑t th·ªß c√¥ng"
            return 1
        fi
    fi
    
    if [[ "$GATEWAY" == "auto" ]]; then
        if [[ -n "$detected_gateway" ]]; then
            GATEWAY="$detected_gateway"
            echo "  ‚úÖ Auto-set GATEWAY = $GATEWAY"
        else
            echo "  ‚ùå Kh√¥ng th·ªÉ auto-detect GATEWAY, vui l√≤ng ƒë·∫∑t th·ªß c√¥ng"
            return 1
        fi
    fi
    
    return 0
}

install_netplan() {
    echo "üì¶ C√†i ƒë·∫∑t Netplan..."
    
    # Ki·ªÉm tra xem netplan ƒë√£ c√≥ ch∆∞a
    if command -v netplan &>/dev/null && [[ -d "/etc/netplan" ]]; then
        echo "  ‚úÖ Netplan ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        return 0
    fi
    
    # C√†i ƒë·∫∑t netplan
    echo "  üì• ƒêang c√†i ƒë·∫∑t netplan.io..."
    if sudo apt update && sudo apt install -y netplan.io; then
        echo "  ‚úÖ Netplan ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng"
        
        # T·∫°o th∆∞ m·ª•c netplan n·∫øu ch∆∞a c√≥
        sudo mkdir -p /etc/netplan
        
        return 0
    else
        echo "  ‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t Netplan"
        return 1
    fi
}

migrate_ifupdown_to_netplan() {
    echo "üîÑ Migrate c·∫•u h√¨nh t·ª´ ifupdown sang Netplan..."
    
    local interfaces_file="/etc/network/interfaces"
    local netplan_file="/etc/netplan/01-netcfg.yaml"
    
    if [[ ! -f "$interfaces_file" ]]; then
        echo "  ‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y file interfaces, b·ªè qua migration"
        return 0
    fi
    
    # ƒê·ªçc c·∫•u h√¨nh t·ª´ interfaces file
    echo "  üìñ ƒê·ªçc c·∫•u h√¨nh t·ª´ $interfaces_file..."
    
    local main_interface=""
    local ipv4_config=""
    local ipv6_configs=()
    local gateway_ipv4=""
    local gateway_ipv6=""
    local dns_servers=()
    
    # Parse interfaces file
    while IFS= read -r line; do
        # Interface ch√≠nh
        if [[ $line =~ ^iface[[:space:]]+([^[:space:]]+)[[:space:]]+inet[[:space:]]+static ]]; then
            main_interface="${BASH_REMATCH[1]}"
            if [[ "$main_interface" != "lo" ]]; then
                echo "    üîå T√¨m th·∫•y interface: $main_interface"
            fi
        fi
        
        # IPv4 address
        if [[ $line =~ ^[[:space:]]*address[[:space:]]+([0-9.]+) ]]; then
            ipv4_config="${BASH_REMATCH[1]}"
            echo "    üåê IPv4: $ipv4_config"
        fi
        
        # IPv4 netmask
        if [[ $line =~ ^[[:space:]]*netmask[[:space:]]+([0-9.]+) ]]; then
            local netmask="${BASH_REMATCH[1]}"
            # Convert netmask to CIDR
            local cidr=$(echo "$netmask" | awk -F. '{
                split($0, a, ".")
                cidr = 0
                for (i in a) {
                    mask = a[i]
                    while (mask > 0) {
                        if (mask % 2 == 1) cidr++
                        mask = int(mask/2)
                    }
                }
                print cidr
            }')
            if [[ -n "$ipv4_config" ]]; then
                ipv4_config="${ipv4_config}/${cidr}"
                echo "    üìè CIDR: /$cidr"
            fi
        fi
        
        # Gateway
        if [[ $line =~ ^[[:space:]]*gateway[[:space:]]+([0-9.]+) ]]; then
            gateway_ipv4="${BASH_REMATCH[1]}"
            echo "    üö™ IPv4 Gateway: $gateway_ipv4"
        fi
        
        # IPv6 addresses
        if [[ $line =~ up[[:space:]]+ip[[:space:]]+addr[[:space:]]+add[[:space:]]+([^[:space:]]+) ]]; then
            local ipv6_addr="${BASH_REMATCH[1]}"
            if [[ "$ipv6_addr" =~ :: ]]; then
                ipv6_configs+=("$ipv6_addr")
                echo "    üåç IPv6: $ipv6_addr"
            fi
        fi
        
        # DNS servers
        if [[ $line =~ ^[[:space:]]*dns-nameservers[[:space:]]+(.+) ]]; then
            IFS=' ' read -ra servers <<< "${BASH_REMATCH[1]}"
            dns_servers=("${servers[@]}")
            echo "    üîç DNS: ${servers[*]}"
        fi
        
    done < "$interfaces_file"
    
    # Fallback ƒë·ªÉ t√¨m interface ch√≠nh n·∫øu kh√¥ng c√≥ trong file
    if [[ -z "$main_interface" ]]; then
        main_interface=$(ip route | grep default | awk '{print $5}' | head -1)
        echo "    üîç Auto-detected interface: $main_interface"
    fi
    
    if [[ -z "$main_interface" ]]; then
        echo "  ‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh interface ch√≠nh"
        return 1
    fi
    
    # T·∫°o Netplan config
    echo "  üìù T·∫°o Netplan configuration..."
    
    # Backup file netplan hi·ªán c√≥ n·∫øu c√≥
    if [[ -f "$netplan_file" ]]; then
        local backup="${netplan_file}.bak.$(date +%s)"
        sudo cp "$netplan_file" "$backup"
        echo "    üì¶ Backup: $backup"
    fi
    
    # T·∫°o netplan config
    sudo tee "$netplan_file" >/dev/null <<EOF
network:
  version: 2
  renderer: networkd
  ethernets:
    $main_interface:
EOF

    # Th√™m IPv4 config n·∫øu c√≥
    if [[ -n "$ipv4_config" ]]; then
        sudo tee -a "$netplan_file" >/dev/null <<EOF
      addresses:
        - $ipv4_config
EOF
    fi
    
    # Th√™m IPv6 configs n·∫øu c√≥
    if [[ ${#ipv6_configs[@]} -gt 0 ]]; then
        if [[ -z "$ipv4_config" ]]; then
            sudo tee -a "$netplan_file" >/dev/null <<EOF
      addresses:
EOF
        fi
        for ipv6_addr in "${ipv6_configs[@]}"; do
            sudo tee -a "$netplan_file" >/dev/null <<EOF
        - $ipv6_addr
EOF
        done
    fi
    
    # Th√™m gateway n·∫øu c√≥
    if [[ -n "$gateway_ipv4" ]]; then
        sudo tee -a "$netplan_file" >/dev/null <<EOF
      gateway4: $gateway_ipv4
EOF
    fi
    
    # Th√™m DNS n·∫øu c√≥, ng∆∞·ª£c l·∫°i d√πng default
    if [[ ${#dns_servers[@]} -gt 0 ]]; then
        sudo tee -a "$netplan_file" >/dev/null <<EOF
      nameservers:
        addresses:
EOF
        for dns in "${dns_servers[@]}"; do
            sudo tee -a "$netplan_file" >/dev/null <<EOF
          - $dns
EOF
        done
    else
        sudo tee -a "$netplan_file" >/dev/null <<EOF
      nameservers:
        addresses:
          - 8.8.8.8
          - 1.1.1.1
          - 2606:4700:4700::1111
EOF
    fi
    
    echo "  ‚úÖ ƒê√£ t·∫°o Netplan config: $netplan_file"
    
    # Update NETPLAN_FILE variable ƒë·ªÉ script s·ª≠ d·ª•ng file m·ªõi
    NETPLAN_FILE="$netplan_file"
    
    # Backup interfaces file
    local interfaces_backup="${interfaces_file}.bak.$(date +%s)"
    sudo cp "$interfaces_file" "$interfaces_backup"
    echo "  üì¶ Backup interfaces: $interfaces_backup"
    
    return 0
}

### === Main Execution ===
echo "üöÄ B·∫Øt ƒë·∫ßu setup proxy IPv4->IPv6..."

# Ch·∫°y validation v√† cleanup
check_dependencies
validate_config
cleanup_docker

# T·∫£i credentials c≈© n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
if [[ "$USE_EXISTING_CREDENTIALS" == "true" ]]; then
    load_existing_credentials || echo "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i credentials c≈©, s·∫Ω t·∫°o m·ªõi"
fi


mkdir -p "$WORKDIR"

### === 1. Backup v√† c·∫≠p nh·∫≠t Netplan ===
BACKUP="$NETPLAN_FILE.bak.$(date +%s)"
sudo cp "$NETPLAN_FILE" "$BACKUP"
echo "üì¶ Backup Netplan -> $BACKUP"

# T·∫°o danh s√°ch ƒë·ªãa ch·ªâ
IP_LIST=()
declare -A USED_IPS  # M·∫£ng ƒë·ªÉ track IP ƒë√£ s·ª≠ d·ª•ng (tr√°nh duplicate khi random)

if [[ "$USE_RANDOM_IPV6" == "true" ]]; then
    echo "üé≤ T·∫°o ${PROXY_COUNT} IPv6 addresses ng·∫´u nhi√™n..."
    for ((i=0; i<PROXY_COUNT; i++)); do
        attempts=0
        max_attempts=1000
        
        # Th·ª≠ t·∫°o IPv6 unique
        while [[ $attempts -lt $max_attempts ]]; do
            suffix=$(generate_random_ipv6_suffix)
            ipv6_addr="$PREFIX:${suffix}/64"
            
            # Ki·ªÉm tra ƒë√£ t·ªìn t·∫°i ch∆∞a
            if [[ -z "${USED_IPS[$ipv6_addr]:-}" ]]; then
                USED_IPS["$ipv6_addr"]=1
                IP_LIST+=("$ipv6_addr")
                break
            fi
            
            ((attempts++))
        done
        
        if [[ $attempts -eq $max_attempts ]]; then
            echo "‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫°o IPv6 unique sau $max_attempts l·∫ßn th·ª≠, s·ª≠ d·ª•ng sequential"
            HEX=$(printf "%x" $((START_HEX + i)))
            IP_LIST+=("$PREFIX::${HEX}/64")
        fi
        
        # Progress indicator cho random mode
        if ((i % 50 == 0 && i > 0)); then
            echo "  üìä ƒê√£ t·∫°o $i/${PROXY_COUNT} IPv6 addresses..."
        fi
    done
else
    echo "üìù T·∫°o ${PROXY_COUNT} IPv6 addresses tu·∫ßn t·ª± t·ª´ hex ${START_HEX}..."
    for ((i=0; i<PROXY_COUNT; i++)); do
        HEX=$(printf "%x" $((START_HEX + i)))
        IP_LIST+=("$PREFIX::${HEX}/64")
    done
fi

# T·∫°o file IPv6 list ƒë·ªÉ backup v√† upload
echo "üìÑ T·∫°o file IPv6 list: $IPV6_LIST_FILE"
> "$IPV6_LIST_FILE"  # X√≥a file c≈© v√† t·∫°o m·ªõi
{
    echo "# IPv6 Addresses List"
    echo "# Generated: $(date '+%Y-%m-%d %H:%M:%S')"
    echo "# Server: $(hostname)"
    echo "# Prefix: $PREFIX"
    echo "# Count: ${#IP_LIST[@]}"
    echo "# Mode: $(if [[ "$USE_RANDOM_IPV6" == "true" ]]; then echo "Random"; else echo "Sequential from hex $START_HEX"; fi)"
    echo ""
    for ipv6_addr in "${IP_LIST[@]}"; do
        echo "$ipv6_addr"
    done
} > "$IPV6_LIST_FILE"
echo "‚úÖ ƒê√£ t·∫°o file IPv6 list v·ªõi ${#IP_LIST[@]} addresses"

# === Netplan Config Object Management ===
# Parse netplan config file th√†nh object config
parse_netplan_config() {
    local netplan_file="$1"
    
    echo "üìñ Parsing netplan config t·ª´: $netplan_file"
    
    if [[ ! -f "$netplan_file" ]]; then
        echo "‚ùå File netplan kh√¥ng t·ªìn t·∫°i: $netplan_file"
        return 1
    fi
    
    # Initialize global associative arrays
    declare -g -A NETPLAN_CONFIG_VERSION
    declare -g -A NETPLAN_CONFIG_RENDERER  
    declare -g -A NETPLAN_CONFIG_ETHERNETS
    declare -g -A NETPLAN_CONFIG_ADDRESSES
    declare -g -A NETPLAN_CONFIG_GATEWAYS
    declare -g -A NETPLAN_CONFIG_NAMESERVERS
    declare -g -A NETPLAN_CONFIG_OTHER_SETTINGS
    declare -g -A NETPLAN_CONFIG_ROUTES
    
    # Clear existing config
    NETPLAN_CONFIG_VERSION=()
    NETPLAN_CONFIG_RENDERER=()
    NETPLAN_CONFIG_ETHERNETS=()
    NETPLAN_CONFIG_ADDRESSES=()
    NETPLAN_CONFIG_GATEWAYS=()
    NETPLAN_CONFIG_NAMESERVERS=()
    NETPLAN_CONFIG_OTHER_SETTINGS=()
    NETPLAN_CONFIG_ROUTES=()
    
    local current_interface=""
    local in_ethernets=false
    local in_addresses=false
    local in_nameservers=false
    local in_nameserver_addresses=false
    local in_routes=false
    local current_route_index=0
    
    while IFS= read -r line || [[ -n "$line" ]]; do
        # Trim leading/trailing whitespace cho comparison
        local trimmed_line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
        
        # Debug: show each line being processed
        echo "    üîç Processing line: '$line' (trimmed: '$trimmed_line')" >&2
        echo "    üîç Current flags: ethernets=$in_ethernets, addresses=$in_addresses, nameservers=$in_nameservers, nameserver_addresses=$in_nameserver_addresses, routes=$in_routes, interface=$current_interface" >&2
        
        # Parse version
        if [[ $line =~ ^[[:space:]]*version:[[:space:]]*([0-9]+) ]]; then
            NETPLAN_CONFIG_VERSION["version"]="${BASH_REMATCH[1]}"
            
        # Parse renderer
        elif [[ $line =~ ^[[:space:]]*renderer:[[:space:]]*(.+) ]]; then
            NETPLAN_CONFIG_RENDERER["renderer"]="${BASH_REMATCH[1]}"
            
        # Parse ethernets section
        elif [[ $trimmed_line == "ethernets:" ]]; then
            in_ethernets=true
            in_addresses=false
            in_nameservers=false
            in_nameserver_addresses=false
            in_routes=false
            current_interface=""  # Reset interface khi v√†o ethernets m·ªõi
            
        # Parse interface name trong ethernets (ch·ªâ khi ·ªü top level c·ªßa ethernets, kh√¥ng trong subsection)
        elif [[ $in_ethernets == true ]] && [[ $in_addresses == false ]] && [[ $in_nameservers == false ]] && [[ $in_routes == false ]] \
            && [[ ! "$trimmed_line" =~ ^(addresses|nameservers|routes|dhcp4|dhcp6|gateway4|gateway6): ]] \
            && [[ $line =~ ^[[:space:]]{2,8}([a-zA-Z0-9_-]+):[[:space:]]*$ ]]; then
            current_interface="${BASH_REMATCH[1]}"
            NETPLAN_CONFIG_ETHERNETS["$current_interface"]="true"
            echo "    üîç Found interface: $current_interface" >&2
            # Reset t·∫•t c·∫£ flags khi t√¨m th·∫•y interface m·ªõi
            in_addresses=false
            in_nameservers=false
            in_nameserver_addresses=false
            in_routes=false
            
        # Parse DHCP settings (ph·∫£i parse tr∆∞·ªõc addresses ƒë·ªÉ kh√¥ng b·ªã skip)
        elif [[ $in_ethernets == true ]] && [[ -n "$current_interface" ]] && [[ $line =~ ^[[:space:]]+dhcp4:[[:space:]]*(.+) ]]; then
            NETPLAN_CONFIG_OTHER_SETTINGS["${current_interface}.dhcp4"]="${BASH_REMATCH[1]}"
            echo "    üîç Parsed dhcp4: ${BASH_REMATCH[1]} for interface: $current_interface"
            
        elif [[ $in_ethernets == true ]] && [[ -n "$current_interface" ]] && [[ $line =~ ^[[:space:]]+dhcp6:[[:space:]]*(.+) ]]; then
            NETPLAN_CONFIG_OTHER_SETTINGS["${current_interface}.dhcp6"]="${BASH_REMATCH[1]}"
            echo "    üîç Parsed dhcp6: ${BASH_REMATCH[1]} for interface: $current_interface"
            
        # Parse addresses section
        elif [[ $in_ethernets == true ]] && [[ -n "$current_interface" ]] && [[ $in_nameservers == false ]] && [[ $trimmed_line == "addresses:" ]]; then
            in_addresses=true
            in_nameservers=false
            in_nameserver_addresses=false
            in_routes=false
            echo "    üîç Found addresses section for interface: $current_interface"
            
        # Parse individual addresses - flexible regex
        elif [[ $in_addresses == true ]] && [[ $in_nameservers == false ]] && [[ $line =~ ^[[:space:]]*-[[:space:]]*(.+) ]]; then
            local address="${BASH_REMATCH[1]}"
            NETPLAN_CONFIG_ADDRESSES["${current_interface}.${address}"]="$address"
            echo "    üîç Parsed address: $address for interface: $current_interface"
            
        # Parse routes section
        elif [[ $in_ethernets == true ]] && [[ -n "$current_interface" ]] && [[ $trimmed_line == "routes:" ]]; then
            in_routes=true
            in_addresses=false
            in_nameservers=false
            in_nameserver_addresses=false
            current_route_index=0
            echo "    üîç Found routes section for interface: $current_interface"
            
        # Parse individual routes - flexible regex for various indentations
        elif [[ $in_routes == true ]] && [[ $line =~ ^[[:space:]]*-[[:space:]]*to:[[:space:]]*(.+) ]]; then
            local route_to="${BASH_REMATCH[1]}"
            NETPLAN_CONFIG_ROUTES["${current_interface}.route${current_route_index}.to"]="$route_to"
            echo "    üîç Parsed route TO: $route_to (index: $current_route_index)"
            
        # Parse route via (gateway) - flexible indentation
        elif [[ $in_routes == true ]] && [[ $line =~ ^[[:space:]]*via:[[:space:]]*(.+) ]]; then
            local route_via="${BASH_REMATCH[1]}"
            NETPLAN_CONFIG_ROUTES["${current_interface}.route${current_route_index}.via"]="$route_via"
            echo "    üîç Parsed route VIA: $route_via (index: $current_route_index)"
            ((current_route_index++))
            
        # Parse nameservers section
        elif [[ $in_ethernets == true ]] && [[ -n "$current_interface" ]] && [[ $trimmed_line == "nameservers:" ]]; then
            in_nameservers=true
            in_addresses=false
            in_nameserver_addresses=false
            in_routes=false
            echo "    üîç Found nameservers section for interface: $current_interface"
            
        # Parse nameserver addresses section
        elif [[ $in_nameservers == true ]] && [[ $trimmed_line == "addresses:" ]]; then
            in_nameserver_addresses=true
            in_addresses=false
            echo "    üîç Found nameserver addresses subsection"
            
        # Parse nameserver addresses - flexible regex
        elif [[ $in_nameserver_addresses == true ]] && [[ $line =~ ^[[:space:]]*-[[:space:]]*(.+) ]]; then
            local ns_address="${BASH_REMATCH[1]}"
            NETPLAN_CONFIG_NAMESERVERS["${current_interface}.${ns_address}"]="$ns_address"
            echo "    üîç Parsed nameserver: $ns_address for interface: $current_interface">&2
            
        # Reset flags based on indentation and content
        else
            # Reset flags when we encounter lines that indicate we're leaving current sections
            if [[ $line =~ ^[[:space:]]*[a-zA-Z] ]] && [[ ! $line =~ ^[[:space:]]{6,} ]]; then
                # If it's a top-level section (not ethernets), reset everything
                if [[ ! $trimmed_line =~ ^(ethernets|addresses|nameservers|routes): ]]; then
                    if [[ $line =~ ^[a-zA-Z] ]]; then  # Top level
                        in_ethernets=false
                        current_interface=""
                        in_addresses=false
                        in_nameservers=false
                        in_nameserver_addresses=false
                        in_routes=false
                    elif [[ $line =~ ^[[:space:]]{2,4}[a-zA-Z] ]] && [[ $in_ethernets == true ]]; then  # Interface level
                        in_addresses=false
                        in_nameservers=false  
                        in_nameserver_addresses=false
                        in_routes=false
                    fi
                fi
            fi
        fi
        
    done < "$netplan_file"
    
    # Debug output v·ªõi chi ti·∫øt v·ªÅ IPv4/IPv6
    local ipv4_count=0
    local ipv6_count=0
    for key in "${!NETPLAN_CONFIG_ADDRESSES[@]}"; do
        local addr="${NETPLAN_CONFIG_ADDRESSES[$key]}"
        if [[ "$addr" =~ :: ]]; then
            ((ipv6_count++))
        else
            ((ipv4_count++))
        fi
    done
    
    echo "‚úÖ Parsed netplan config:"
    echo "  üìã Version: ${NETPLAN_CONFIG_VERSION[version]:-none}"
    echo "  üñ•Ô∏è Renderer: ${NETPLAN_CONFIG_RENDERER[renderer]:-none}"
    echo "  üîå Interfaces: ${!NETPLAN_CONFIG_ETHERNETS[*]}"
    echo "  üìç Addresses: ${#NETPLAN_CONFIG_ADDRESSES[@]} found ($ipv4_count IPv4, $ipv6_count IPv6)"
    echo "  üö™ Gateways: ${#NETPLAN_CONFIG_GATEWAYS[@]} found (IPv4 only, IPv6 auto-detect)"
    echo "  ÔøΩÔ∏è Routes: ${#NETPLAN_CONFIG_ROUTES[@]} found"
    echo "  ÔøΩüîç Nameservers: ${#NETPLAN_CONFIG_NAMESERVERS[@]} found"
    echo "  ‚öôÔ∏è DHCP Settings: ${#NETPLAN_CONFIG_OTHER_SETTINGS[@]} found"
    
    # Debug: show t·∫•t c·∫£ addresses
    for key in "${!NETPLAN_CONFIG_ADDRESSES[@]}"; do
        echo "    üè† $key = ${NETPLAN_CONFIG_ADDRESSES[$key]}"
    done
    
    # Debug: show t·∫•t c·∫£ routes
    for key in "${!NETPLAN_CONFIG_ROUTES[@]}"; do
        echo "    üõ£Ô∏è $key = ${NETPLAN_CONFIG_ROUTES[$key]}"
    done
    
    return 0
}

# Th√™m IPv6 addresses v√†o config object
add_ipv6_addresses() {
    local interface="$1"
    shift
    local new_addresses=("$@")
    
    echo "‚ûï Th√™m ${#new_addresses[@]} IPv6 addresses cho interface $interface"
    
    for addr in "${new_addresses[@]}"; do
        # B·ªè IPv6 c≈© n·∫øu ƒë√£ t·ªìn t·∫°i (tr√°nh duplicate)
        for key in "${!NETPLAN_CONFIG_ADDRESSES[@]}"; do
            if [[ "$key" == "${interface}."* ]] && [[ "${NETPLAN_CONFIG_ADDRESSES[$key]}" == "$addr" ]]; then
                unset NETPLAN_CONFIG_ADDRESSES["$key"]
            fi
        done
        
        # Th√™m IPv6 m·ªõi
        NETPLAN_CONFIG_ADDRESSES["${interface}.${addr}"]="$addr"
    done
    
    echo "‚úÖ ƒê√£ th√™m IPv6 addresses v√†o config object"
}

# X√≥a IPv6 addresses t·ª´ config object (gi·ªØ l·∫°i IPv4 v√† IPv6 ƒë·∫ßu ti√™n)
remove_proxy_ipv6_addresses() {
    local interface="$1"
    
    echo "üóëÔ∏è X√≥a proxy IPv6 addresses t·ª´ interface $interface"
    
    local first_ipv6=""
    local addresses_to_remove=()
    local ipv4_count=0
    local ipv6_count=0
    
    # ƒê·∫øm v√† t√¨m IPv6 ƒë·∫ßu ti√™n ƒë·ªÉ gi·ªØ l·∫°i
    for key in "${!NETPLAN_CONFIG_ADDRESSES[@]}"; do
        if [[ "$key" == "${interface}."* ]]; then
            local addr="${NETPLAN_CONFIG_ADDRESSES[$key]}"
            if [[ "$addr" =~ :: ]]; then
                ((ipv6_count++))
                if [[ -z "$first_ipv6" ]]; then
                    first_ipv6="$addr"
                fi
            else
                ((ipv4_count++))
            fi
        fi
    done
    
    echo "  üìä T√¨m th·∫•y: $ipv4_count IPv4, $ipv6_count IPv6"
    echo "  üîí Gi·ªØ l·∫°i IPv6 ƒë·∫ßu ti√™n: $first_ipv6"
    
    # X√≥a t·∫•t c·∫£ IPv6 addresses tr·ª´ IPv6 ƒë·∫ßu ti√™n (gi·ªØ nguy√™n t·∫•t c·∫£ IPv4)
    for key in "${!NETPLAN_CONFIG_ADDRESSES[@]}"; do
        if [[ "$key" == "${interface}."* ]]; then
            local addr="${NETPLAN_CONFIG_ADDRESSES[$key]}"
            # Ch·ªâ x√≥a IPv6 (c√≥ ::) v√† kh√¥ng ph·∫£i IPv6 ƒë·∫ßu ti√™n
            if [[ "$addr" =~ :: ]] && [[ "$addr" != "$first_ipv6" ]]; then
                addresses_to_remove+=("$key")
                echo "  üóëÔ∏è S·∫Ω x√≥a: $addr"
            elif [[ ! "$addr" =~ :: ]]; then
                echo "  üîí Gi·ªØ l·∫°i IPv4: $addr"
            fi
        fi
    done
    
    # X√≥a c√°c addresses
    for key in "${addresses_to_remove[@]}"; do
        unset NETPLAN_CONFIG_ADDRESSES["$key"]
    done
    
    echo "‚úÖ ƒê√£ x√≥a ${#addresses_to_remove[@]} proxy IPv6 addresses"
}

# Rebuild netplan config file t·ª´ object config
rebuild_netplan_config() {
    local output_file="$1"
    
    echo "üî® Rebuilding netplan config t·ª´ object..."
    
    # T·∫°o temp file
    local temp_file="/tmp/netplan_rebuild_$$.yaml"
    
    # B·∫Øt ƒë·∫ßu t·∫°o file netplan
    {
        echo "network:"
        
        # Version
        if [[ -n "${NETPLAN_CONFIG_VERSION[version]:-}" ]]; then
            echo "  version: ${NETPLAN_CONFIG_VERSION[version]}"
        else
            echo "  version: 2"
        fi
        
        # Renderer
        if [[ -n "${NETPLAN_CONFIG_RENDERER[renderer]:-}" ]]; then
            echo "  renderer: ${NETPLAN_CONFIG_RENDERER[renderer]}"
        fi
        
        # Ethernets section
        if [[ ${#NETPLAN_CONFIG_ETHERNETS[@]} -gt 0 ]]; then
            echo "  ethernets:"
            
            # L·∫∑p qua t·ª´ng interface
            for interface in "${!NETPLAN_CONFIG_ETHERNETS[@]}"; do
                echo "    $interface:"
                
                # DHCP settings - s·ª≠ d·ª•ng config hi·ªán c√≥ ho·∫∑c m·∫∑c ƒë·ªãnh
                local has_dhcp4=false
                local has_dhcp6=false
                local has_ipv4_addresses=false
                
                # Ki·ªÉm tra xem c√≥ IPv4 addresses kh√¥ng
                for key in "${!NETPLAN_CONFIG_ADDRESSES[@]}"; do
                    if [[ "$key" == "${interface}."* ]]; then
                        local addr="${NETPLAN_CONFIG_ADDRESSES[$key]}"
                        if [[ "$addr" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+ ]]; then
                            has_ipv4_addresses=true
                            break
                        fi
                    fi
                done
                
                # DHCP settings t·ª´ config hi·ªán c√≥
                for key in "${!NETPLAN_CONFIG_OTHER_SETTINGS[@]}"; do
                    if [[ "$key" == "${interface}.dhcp4" ]]; then
                        echo "      dhcp4: ${NETPLAN_CONFIG_OTHER_SETTINGS[$key]}"
                        has_dhcp4=true
                    elif [[ "$key" == "${interface}.dhcp6" ]]; then
                        echo "      dhcp6: ${NETPLAN_CONFIG_OTHER_SETTINGS[$key]}"
                        has_dhcp6=true
                    fi
                done
                
                # DHCP4 logic: n·∫øu c√≥ IPv4 addresses th√¨ dhcp4: false, ng∆∞·ª£c l·∫°i dhcp4: true
                if [[ "$has_dhcp4" == false ]]; then
                    if [[ "$has_ipv4_addresses" == true ]]; then
                        echo "      dhcp4: false"  # C√≥ IPv4 static addresses
                    else
                        echo "      dhcp4: true"   # Kh√¥ng c√≥ IPv4 addresses, d√πng DHCP
                    fi
                fi
                
                # N·∫øu kh√¥ng c√≥ DHCP6 setting, set dhcp6: false
                if [[ "$has_dhcp6" == false ]]; then
                    echo "      dhcp6: false"
                fi
                
                # Addresses
                local interface_addresses=()
                for key in "${!NETPLAN_CONFIG_ADDRESSES[@]}"; do
                    if [[ "$key" == "${interface}."* ]]; then
                        interface_addresses+=("${NETPLAN_CONFIG_ADDRESSES[$key]}")
                    fi
                done
                
                if [[ ${#interface_addresses[@]} -gt 0 ]]; then
                    echo "      addresses:"
                    # Sort addresses ƒë·ªÉ IPv4 tr∆∞·ªõc, IPv6 sau
                    local sorted_addresses=($(printf '%s\n' "${interface_addresses[@]}" | sort -V))
                    for addr in "${sorted_addresses[@]}"; do
                        echo "        - $addr"
                    done
                fi
                
                # Gateways - ch·ªâ gi·ªØ gateway4 (IPv4), b·ªè qua gateway6 (IPv6 s·∫Ω auto-detect)
                for key in "${!NETPLAN_CONFIG_GATEWAYS[@]}"; do
                    if [[ "$key" == "${interface}.gateway4" ]]; then
                        echo "      gateway4: ${NETPLAN_CONFIG_GATEWAYS[$key]}"
                    fi
                    # B·ªè qua gateway6 - IPv6 gateway th∆∞·ªùng l√† prefix::1 v√† auto-detect
                done
                
                # Nameservers
                local interface_nameservers=()
                for key in "${!NETPLAN_CONFIG_NAMESERVERS[@]}"; do
                    if [[ "$key" == "${interface}."* ]]; then
                        interface_nameservers+=("${NETPLAN_CONFIG_NAMESERVERS[$key]}")
                    fi
                done
                
                if [[ ${#interface_nameservers[@]} -gt 0 ]]; then
                    echo "      nameservers:"
                    echo "        addresses:"
                    for ns in "${interface_nameservers[@]}"; do
                        echo "          - $ns"
                    done
                fi
                
                # Routes
                local interface_routes_to=()
                local interface_routes_via=()
                local route_count=0
                
                # Collect routes for this interface (debug output to stderr)
                echo "    üîç Checking routes for interface: $interface" >&2
                
                for key in "${!NETPLAN_CONFIG_ROUTES[@]}"; do
                    echo "    üîç Checking route key: $key" >&2
                    if [[ "$key" == "${interface}.route"*".to" ]]; then
                        local route_index=$(echo "$key" | sed -n 's/.*route\([0-9]*\)\.to/\1/p')
                        local to_key="${interface}.route${route_index}.to"
                        local via_key="${interface}.route${route_index}.via"
                        
                        echo "    üîç Route index: $route_index, to_key: $to_key, via_key: $via_key" >&2
                        
                        if [[ -n "${NETPLAN_CONFIG_ROUTES[$to_key]:-}" && -n "${NETPLAN_CONFIG_ROUTES[$via_key]:-}" ]]; then
                            interface_routes_to+=("${NETPLAN_CONFIG_ROUTES[$to_key]}")
                            interface_routes_via+=("${NETPLAN_CONFIG_ROUTES[$via_key]}")
                            ((route_count++))
                            echo "    ‚úÖ Added route: ${NETPLAN_CONFIG_ROUTES[$to_key]} via ${NETPLAN_CONFIG_ROUTES[$via_key]}" >&2
                        else
                            echo "    ‚ùå Missing route data - to: '${NETPLAN_CONFIG_ROUTES[$to_key]:-}' via: '${NETPLAN_CONFIG_ROUTES[$via_key]:-}'" >&2
                        fi
                    fi
                done
                
                echo "    üìä Found $route_count routes for interface $interface" >&2
                
                if [[ $route_count -gt 0 ]]; then
                    echo "      routes:"
                    for ((r=0; r<route_count; r++)); do
                        echo "      - to: ${interface_routes_to[$r]}"
                        echo "        via: ${interface_routes_via[$r]}"
                    done
                fi
            done
        fi
        
    } > "$temp_file"
    
    # Validate YAML syntax
    if command -v python3 &>/dev/null; then
        if ! python3 -c "import yaml; yaml.safe_load(open('$temp_file'))" 2>/dev/null; then
            echo "‚ö†Ô∏è YAML syntax warning, nh∆∞ng ti·∫øp t·ª•c..."
        fi
    fi
    
    # Copy file v·ªõi permissions ph√π h·ª£p
    if sudo cp "$temp_file" "$output_file"; then
        sudo chmod 644 "$output_file"
        rm -f "$temp_file"
        echo "‚úÖ ƒê√£ rebuild netplan config: $output_file"
        return 0
    else
        echo "‚ùå L·ªói khi copy netplan config"
        rm -f "$temp_file"
        return 1
    fi
}

# H√†m ch√≠nh ƒë·ªÉ c·∫≠p nh·∫≠t netplan v·ªõi IPv6 addresses m·ªõi (thay th·∫ø insert_ips c≈©)
update_netplan_with_ipv6() {
    echo "üìù C·∫≠p nh·∫≠t Netplan v·ªõi IPv6 addresses b·∫±ng object config approach..."
    
    # Parse config hi·ªán t·∫°i
    if ! parse_netplan_config "$NETPLAN_FILE"; then
        echo "‚ùå Kh√¥ng th·ªÉ parse netplan config"
        return 1
    fi
    
    # T√¨m interface ch√≠nh (th∆∞·ªùng l√† interface ƒë·∫ßu ti√™n c√≥ addresses)
    local main_interface=""
    for interface in "${!NETPLAN_CONFIG_ETHERNETS[@]}"; do
        # Ki·ªÉm tra xem interface c√≥ addresses kh√¥ng
        for key in "${!NETPLAN_CONFIG_ADDRESSES[@]}"; do
            if [[ "$key" == "${interface}."* ]]; then
                main_interface="$interface"
                break 2
            fi
        done
    done
    
    # N·∫øu kh√¥ng t√¨m th·∫•y interface n√†o c√≥ addresses, l·∫•y interface ƒë·∫ßu ti√™n
    if [[ -z "$main_interface" ]]; then
        main_interface=$(echo "${!NETPLAN_CONFIG_ETHERNETS[@]}" | cut -d' ' -f1)
    fi
    
    if [[ -z "$main_interface" ]]; then
        echo "‚ùå Kh√¥ng t√¨m th·∫•y interface n√†o trong netplan config"
        return 1
    fi
    
    echo "üîå S·ª≠ d·ª•ng interface: $main_interface"
    
    # X√≥a proxy IPv6 addresses c≈© (gi·ªØ IPv6 ƒë·∫ßu ti√™n)
    remove_proxy_ipv6_addresses "$main_interface"
    
    # Ki·ªÉm tra IP_LIST c√≥ t·ªìn t·∫°i kh√¥ng
    if [[ ${#IP_LIST[@]} -eq 0 ]]; then
        echo "‚ùå IP_LIST r·ªóng, kh√¥ng c√≥ g√¨ ƒë·ªÉ th√™m"
        return 1
    fi
    
    # Th√™m IPv6 addresses m·ªõi
    add_ipv6_addresses "$main_interface" "${IP_LIST[@]}"
    
    # Th√™m nameservers m·∫∑c ƒë·ªãnh n·∫øu ch∆∞a c√≥
    local has_cloudflare=false
    for key in "${!NETPLAN_CONFIG_NAMESERVERS[@]}"; do
        if [[ "${NETPLAN_CONFIG_NAMESERVERS[$key]}" == "2606:4700:4700::1111" ]]; then
            has_cloudflare=true
            break
        fi
    done
    
    if [[ "$has_cloudflare" == false ]]; then
        echo "‚ûï Th√™m nameservers m·∫∑c ƒë·ªãnh..."
        NETPLAN_CONFIG_NAMESERVERS["${main_interface}.8.8.8.8"]="8.8.8.8"
        NETPLAN_CONFIG_NAMESERVERS["${main_interface}.1.1.1.1"]="1.1.1.1"
        NETPLAN_CONFIG_NAMESERVERS["${main_interface}.2606:4700:4700::1111"]="2606:4700:4700::1111"
    fi
    
    # Rebuild config file
    if ! rebuild_netplan_config "$NETPLAN_FILE"; then
        echo "‚ùå Kh√¥ng th·ªÉ rebuild netplan config"
        return 1
    fi
    
    echo "‚úÖ ƒê√£ c·∫≠p nh·∫≠t Netplan v·ªõi ${#IP_LIST[@]} IPv6 addresses"
    return 0
}

# S·ª≠ d·ª•ng approach m·ªõi v·ªõi object config
if ! update_netplan_with_ipv6; then
    echo "‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t netplan, s·∫Ω kh√¥i ph·ª•c t·ª´ backup"
    if [[ -f "$BACKUP" ]]; then
        sudo cp "$BACKUP" "$NETPLAN_FILE"
        echo "üîÑ ƒê√£ kh√¥i ph·ª•c netplan t·ª´ backup"
    fi
    exit 1
fi

echo "üöÄ √Åp d·ª•ng Netplan..."
if sudo netplan apply 2>/dev/null; then
    echo "‚úÖ Netplan applied successfully"
else
    echo "‚ö†Ô∏è Netplan apply c√≥ warning, nh∆∞ng ti·∫øp t·ª•c..."
fi

### === 2. T·∫°o c·∫•u h√¨nh 3proxy v·ªõi random password ===
echo "‚öôÔ∏è T·∫°o c·∫•u h√¨nh 3proxy..."

# X√≥a file k·∫øt qu·∫£ c≈© v√† t·∫°o m·ªõi
> "$RESULT_FILE"

# T·∫°o c·∫•u h√¨nh 3proxy theo official Docker image format
cat >"$WORKDIR/3proxy.cfg" <<EOF
nserver 8.8.8.8
nserver 1.1.1.1
nscache 65536
log
auth strong
EOF

USER_BLOCK="users "

echo "üîê T·∫°o ${PROXY_COUNT} SOCKS proxy..."

# Ki·ªÉm tra IP_LIST c√≥ ƒë·ªß kh√¥ng
if [[ ${#IP_LIST[@]} -lt $PROXY_COUNT ]]; then
  echo "‚ùå IP_LIST ch·ªâ c√≥ ${#IP_LIST[@]} IP nh∆∞ng c·∫ßn $PROXY_COUNT"
  exit 1
fi

# Bi·∫øn ƒë·∫øm th·ªëng k√™
reused_count=0
new_count=0

# T·ªëi ∆∞u: T·∫°o c√°c arrays ƒë·ªÉ batch processing
USER_BLOCKS=()
SOCKS_CONFIGS=()

# T·∫°m th·ªùi t·∫Øt strict mode cho v√≤ng l·∫∑p n√†y
set +euo pipefail

echo "üîÑ B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p t·∫°o proxy..."

for ((i=0; i<PROXY_COUNT; i++)); do
  # Debug cho 10 proxy ƒë·∫ßu
  if [[ $i -lt 10 ]]; then
    echo "  üîß ƒêang x·ª≠ l√Ω proxy $i..."
  fi
  
  # Ki·ªÉm tra IP_LIST[$i] t·ªìn t·∫°i
  if [[ -z "${IP_LIST[$i]:-}" ]]; then
    echo "‚ùå IP_LIST[$i] kh√¥ng t·ªìn t·∫°i, d·ª´ng l·∫°i"
    break
  fi
  
  # L·∫•y IPv6 t·ª´ IP_LIST ƒë√£ t·∫°o (b·ªè /64 suffix)
  IPV6_FULL="${IP_LIST[$i]}"
  IPV6_OUT="${IPV6_FULL%/64}"       # IPv6 cho external (outbound traffic)
  PORT=$((PORT_START + i))
  USER="${PROXY_USER}${i}"
  
  # Debug cho 10 proxy ƒë·∫ßu
  if [[ $i -lt 10 ]]; then
    echo "    üìç IPv6: $IPV6_OUT, Port: $PORT, User: $USER"
  fi
  
  # Ki·ªÉm tra c√≥ s·ª≠ d·ª•ng credentials c≈© kh√¥ng
  if [[ "$USE_EXISTING_CREDENTIALS" == "true" && -n "${OLD_CREDENTIALS[$PORT]:-}" ]]; then
    # S·ª≠ d·ª•ng credentials c≈©
    IFS=':' read -r old_user old_pass <<< "${OLD_CREDENTIALS[$PORT]}"
    USER="$old_user"
    PASS="$old_pass"
    ((reused_count++))
  else
    # T·∫°o password m·ªõi
    PASS=$(openssl rand -hex 6)
    if [[ -z "$PASS" ]]; then
      echo "‚ùå Kh√¥ng th·ªÉ t·∫°o password cho proxy $i"
      PASS="default$(printf "%03d" $i)"  # Fallback password
    fi
    ((new_count++))
  fi
  
  # Th√™m v√†o arrays
  USER_BLOCKS+=("${USER}:CL:${PASS}")
  SOCKS_CONFIGS+=("socks -6 -p${PORT} -e${IPV6_OUT}")
  
  # L·∫•y IP server (v·ªõi fallback) - ch·ªâ l·∫ßn ƒë·∫ßu
  if [[ $i -eq 0 ]]; then
    echo "üîç L·∫•y IP server..."
    SERVER_IP=$(hostname -I | awk '{print $1}' 2>/dev/null || ip route get 8.8.8.8 | awk '{print $7; exit}' 2>/dev/null || echo "YOUR_SERVER_IP")
    echo "  üì° Server IP: $SERVER_IP"
  fi
  
  # Ghi v√†o result file
  echo "${USER}:${PASS}@${SERVER_IP}:${PORT}" >>"$RESULT_FILE" || {
    echo "‚ùå Kh√¥ng th·ªÉ ghi v√†o file $RESULT_FILE"
    break
  }
  
  # Progress indicator - √≠t th∆∞·ªùng xuy√™n h∆°n
  if ((i % 100 == 0 && i > 0)); then
    echo "  üìä ƒê√£ t·∫°o $i/${PROXY_COUNT} proxy..."
  fi
  
  # Safety check - tr√°nh v√≤ng l·∫∑p v√¥ h·∫°n
  if [[ $i -gt 2000 ]]; then
    echo "‚ö†Ô∏è V√≤ng l·∫∑p qu√° 2000, d·ª´ng l·∫°i"
    break
  fi
done

echo "üîö Ho√†n t·∫•t v√≤ng l·∫∑p. ƒê√£ t·∫°o $i proxy"

# Kh√¥i ph·ª•c strict mode
set -euo pipefail

# Hi·ªÉn th·ªã th·ªëng k√™
echo "‚úÖ Ho√†n t·∫•t t·∫°o proxy:"
if [[ $reused_count -gt 0 ]]; then
  echo "  üîÑ S·ª≠ d·ª•ng l·∫°i: $reused_count credentials"
fi
if [[ $new_count -gt 0 ]]; then
  echo "  üÜï T·∫°o m·ªõi: $new_count credentials"
fi

# Ghi users block v√†o file - s·ª≠ d·ª•ng array ƒë·ªÉ t·ªëi ∆∞u
echo "üîß T·∫°o c·∫•u h√¨nh 3proxy..."
{
  echo "users $(IFS=' '; echo "${USER_BLOCKS[*]}")"
  echo ""
  echo "allow * * *"
  echo "flush"
  echo ""
  # Ghi t·∫•t c·∫£ SOCKS configs
  printf '%s\n' "${SOCKS_CONFIGS[@]}"
} >>"$WORKDIR/3proxy.cfg"

### === 3. Dockerfile v√† docker-compose ===
echo "üê≥ Chu·∫©n b·ªã Docker files..."

cat >"$WORKDIR/Dockerfile" <<'EOF'
FROM 3proxy/3proxy:latest

# Copy configuration file to the correct location for chroot
COPY 3proxy.cfg /usr/local/3proxy/conf/3proxy.cfg

# Expose port range
EXPOSE 33001-34000

# Use default entrypoint from official image
EOF

cat >"$WORKDIR/docker-compose.yml" <<'EOF'
version: '3.9'
services:
  proxy:
    build: .
    container_name: ipv4-to-ipv6-proxy
    restart: unless-stopped
    network_mode: "host"
    ports:
      - "33001-34000:33001-34000"
EOF

### === 4. Build v√† Deploy ===
echo "üî® Building v√† deploying Docker container..."
cd "$WORKDIR"

# Ki·ªÉm tra Docker Compose version v√† s·ª≠ d·ª•ng l·ªánh ph√π h·ª£p
COMPOSE_CMD=""
if command -v docker-compose &>/dev/null; then
    COMPOSE_CMD="docker-compose"
    echo "  üîç S·ª≠ d·ª•ng docker-compose (v1)"
elif docker compose version &>/dev/null; then
    COMPOSE_CMD="docker compose"
    echo "  üîç S·ª≠ d·ª•ng docker compose (v2)"
else
    echo "  ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Docker Compose, th·ª≠ build tr·ª±c ti·∫øp..."
    # Fallback: build v√† run tr·ª±c ti·∫øp kh√¥ng d√πng compose
    echo "  üèóÔ∏è Building Docker image..."
    if docker build -t 3proxy-docker-proxy . && \
       docker run -d --name ipv4-to-ipv6-proxy --restart unless-stopped --network host 3proxy-docker-proxy; then
        echo "‚úÖ Container started successfully (direct mode)"
        # Nh·∫£y ƒë·∫øn ph·∫ßn verification
        COMPOSE_CMD=""  # ƒê·∫∑t r·ªóng ƒë·ªÉ skip ph·∫ßn compose
    else
        echo "‚ùå Docker build/run failed"
        exit 1
    fi
fi

# Ch·ªâ ch·∫°y compose n·∫øu c√≥ COMPOSE_CMD
if [[ -n "$COMPOSE_CMD" ]]; then
    echo "  üöÄ Deploying v·ªõi $COMPOSE_CMD..."
    if $COMPOSE_CMD up -d --build --remove-orphans; then
        echo "‚úÖ Docker container started successfully"
    else
        echo "‚ùå Docker compose deployment failed"
        exit 1
    fi
fi

# ƒê·ª£i container s·∫µn s√†ng
echo "‚è≥ ƒê·ª£i container kh·ªüi ƒë·ªông..."
sleep 10

if docker ps | grep -q ipv4-to-ipv6-proxy; then
    echo "‚úÖ Container ƒëang ch·∫°y"
    
    # Test SOCKS proxy ƒë·∫ßu ti√™n
    FIRST_PROXY=$(head -n1 "$RESULT_FILE")
    echo "üß™ Test SOCKS proxy ƒë·∫ßu ti√™n: $FIRST_PROXY"
    echo "üß™ V√≠ d·ª• test v·ªõi curl: curl --socks5 $FIRST_PROXY https://ip6.me"
    
    # Ki·ªÉm tra port ƒëang listen
    echo "üîç Ki·ªÉm tra port ${PORT_START} ƒëang listen..."
    if netstat -tlnp 2>/dev/null | grep -q ":${PORT_START} "; then
        echo "‚úÖ Port ${PORT_START} ƒëang listen"
    else
        echo "‚ö†Ô∏è Port ${PORT_START} kh√¥ng listen, check logs"
    fi
    
    # Suggestion ƒë·ªÉ m·ªü firewall
    echo ""
    echo "üî• M·ªü firewall ports:"
    echo "sudo ufw allow ${PORT_START}:$((PORT_START + PROXY_COUNT - 1))/tcp"
    echo ""
else
    echo "‚ùå Container kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c"
    echo "üîç Debug logs:"
    docker logs ipv4-to-ipv6-proxy 2>/dev/null || echo "No logs available"
    echo ""
    echo "üîß Ki·ªÉm tra container status:"
    docker ps -a | grep ipv4-to-ipv6-proxy || echo "Container not found"
    exit 1
fi

### === 5. K·∫øt qu·∫£ ===
echo "üéâ Ho√†n t·∫•t! Th√¥ng tin SOCKS proxy:"
echo "üìÑ File proxy result: $RESULT_FILE"
echo "üåç File IPv6 list: $IPV6_LIST_FILE"
echo "üìä S·ªë l∆∞·ª£ng proxy: $PROXY_COUNT"
echo "üåê Port range: ${PORT_START}-$((PORT_START + PROXY_COUNT - 1))"
echo "üîó SOCKS proxy ƒë·∫ßu ti√™n: $(head -n1 $RESULT_FILE)"
echo ""
if [[ "$USE_EXISTING_CREDENTIALS" == "true" ]]; then
    echo "üîÑ ƒê√£ s·ª≠ d·ª•ng l·∫°i credentials c≈© t·ª´ file proxy_result.txt"
else
    echo "üÜï ƒê√£ t·∫°o m·ªõi t·∫•t c·∫£ credentials"
fi

if [[ "$USE_RANDOM_IPV6" == "true" ]]; then
    echo "üé≤ ƒê√£ s·ª≠ d·ª•ng IPv6 addresses ng·∫´u nhi√™n"
else
    echo "üìù ƒê√£ s·ª≠ d·ª•ng IPv6 addresses tu·∫ßn t·ª± t·ª´ hex ${START_HEX}"
fi
echo ""

# Upload t·ªõi Telegram n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
upload_to_telegram

echo "üí° ƒê·ªÉ s·ª≠ d·ª•ng l·∫°i username/password c≈© l·∫ßn sau:"
echo "   ƒê·∫∑t USE_EXISTING_CREDENTIALS=true trong script"
echo ""
echo "üí° ƒê·ªÉ t·ª± ƒë·ªông upload k·∫øt qu·∫£ t·ªõi Telegram:"
echo "   ƒê·∫∑t TELEGRAM_BOT_TOKEN v√† TELEGRAM_CHAT_ID trong script"
echo "   üì§ S·∫Ω upload 2 files: proxy_result.txt v√† ipv6_list.txt"
echo ""
echo "üí° ƒê·ªÉ s·ª≠ d·ª•ng IPv6 addresses ng·∫´u nhi√™n:"
echo "   ƒê·∫∑t USE_RANDOM_IPV6=true trong script (t·∫°o random 4 nh√≥m sau ::)"
echo ""
echo "üí° ƒê·ªÉ t·ª± ƒë·ªông detect IPv6 prefix v√† gateway:"
echo "   ƒê·∫∑t PREFIX=\"auto\" v√† GATEWAY=\"auto\" trong script"
echo ""
echo "‚ÑπÔ∏è Script t·ª± ƒë·ªông c√†i ƒë·∫∑t Netplan v√† migrate c·∫•u h√¨nh t·ª´ ifupdown n·∫øu c·∫ßn"
echo ""
echo "üõ†Ô∏è C√°c l·ªánh h·ªØu √≠ch:"
echo "  üìã Xem logs: docker logs -f ipv4-to-ipv6-proxy"
echo "  üîÑ Restart: docker restart ipv4-to-ipv6-proxy"
echo "  üõë Stop: docker stop ipv4-to-ipv6-proxy"
echo "  üìä Status: docker ps | grep proxy"
echo ""
echo "‚úÖ Setup ho√†n t·∫•t!"